#pragma once

#ifdef WIN32
	#define NOMINMAX
	#define WIN32_LEAN_AND_MEAN
	#include <Windows.h>
#endif

#include <GL/glew.h>
#include <GL/gl.h>

#include "stdx"

namespace ogl
{

struct ogl_tag;
typedef stdx::error<ogl_tag> ogl_error;

#define THROW_OPENGL_ERROR(error, ctx) do { auto _uniqueerrorval = error; if (_uniqueerrorval != GL_NO_ERROR) throwx( ::ogl::ogl_error(ctx) ); } while (false)
#define THROW_OPENGL_LASTERROR(ctx) THROW_OPENGL_ERROR(glGetError(), ctx)
#define THROW_OPENGL_VERROR(error, ctx) do { error; THROW_OPENGL_LASTERROR(ctx); } while (false)

template <class RefClass, class Pointer>
struct ref_base : stdx::ref_base<Pointer>
{
	typedef Pointer pointer;
	typedef stdx::own<RefClass> owned;
	void forget()
	{
		this->ref = 0;
	}
	bool valid() const
	{
		return (this->ref != 0);
	}
};

template <class RefClass, class Pointer, void (GLAPIENTRY* Deleter)(GLsizei, Pointer const*)>
struct gl_destroy : ref_base<RefClass, Pointer>
{
	void destroy() const
	{
		if (this->ref)
			(*Deleter)(1, &this->ref);
	}
};

template <class RefClass, class Pointer, void (GLAPIENTRY*& Deleter)(GLsizei, Pointer const*)>
struct glew_destroy : ref_base<RefClass, Pointer>
{
	void destroy() const
	{
		if (this->ref)
			(*Deleter)(1, &this->ref);
	}
};

template <class RefClass, class Pointer, void (GLAPIENTRY* Deleter)(Pointer)>
struct gl_destroy_single : ref_base<RefClass, Pointer>
{
	void destroy() const
	{
		if (this->ref)
			(*Deleter)(this->ref);
	}
};

template <class RefClass, class Pointer, void (GLAPIENTRY*& Deleter)(Pointer)>
struct glew_destroy_single : ref_base<RefClass, Pointer>
{
	void destroy() const
	{
		if (this->ref)
			(*Deleter)(this->ref);
	}
};

} // namespace
