#pragma once

#include "stdx"
#include <iostream>
#include <string>
#include <cctype>

namespace appx
{

inline stdx::range<char const*> last_number(char const* arg)
{
	stdx::range<char const*> r(arg, arg);
	for (auto it = arg; *it; ++it)
		if (std::isdigit(*it))
		{
			if (r.last < it)
				r.first = it;
			r.last = it + 1;
		}
	return r;
}
	
struct Task
{
	float progress_pct;
	bool active;

	Task(char const* name)
		: progress_pct(0.0f)
		, active(true)
	{	std::cout << name << ": "; }
	Task(Task&& right)
		: progress_pct(right.progress_pct)
		, active(right.active)
	{	right.active = false; }
	~Task()
	{	if (active) std::cout << std::endl; }

	void progress(float nextProgress, float minDisplayDelta = 0.0f)
	{	
		progressPct(100.0f * nextProgress, 100.0f * minDisplayDelta);
	}
	void progressPct(float nextProgressPct, float minDisplayDeltaPct = 0.0f)
	{	
		if (nextProgressPct >= progress_pct + minDisplayDeltaPct)
		{
			std::cout << nextProgressPct << "% ";
			progress_pct = nextProgressPct;
		}
	}
};

inline std::string exception_string()
{
	try
	{
		throw;
	}
	catch (std::exception const &excpt)
	{
		return excpt.what();
	}
	catch (...)
	{
		return "Unknown error";
	}
}

inline void print_exception()
{
	try
	{
		throw;
	}
	catch (std::exception const &excpt)
	{
		std::cerr << "Error: " << excpt.what() << std::endl;
	}
	catch (...)
	{
		std::cerr << "Unknown error" << std::endl;
	}
}

template <class Fun>
inline bool print_on_error(Fun&& fun) { try { fun(); return true; }
	catch (...) { print_exception(); }
	return false; }

template <class Fun>
struct noexcept_wrapper
{
	Fun fun;

	bool operator ()() { return print_on_error(fun); }
	bool operator ()() const { return print_on_error(fun); }
};

template <class Fun>
inline noexcept_wrapper<Fun> wrap_noexcept(Fun&& fun)
{
	noexcept_wrapper<Fun> w = { MOVE(fun) };
	return w;
}

template <class Changed, class Fun>
inline void maybe_update(Changed& changed, Fun&& update)
{
	if (changed)
	{
		update();
		changed = false;
	}
}

template <class Changed, class Fun>
inline void maybe_update_noexcept(Changed& changed, Fun&& update) { try { maybe_update(changed, update); return; }
	catch (...) { print_exception(); } }

} // namespace
