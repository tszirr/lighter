#pragma once

#include "cudabase"
#include "oglbase"
#include <cudaGL.h>

#include "stdx"
#include "filex"

#include <algorithm>
#include <iostream>
#include <string>

namespace cuda
{

struct CUDA : stdx::noncopyable
{
	CUDA()
	{
		THROW_CUDA_ERROR(cuInit(0), "cuInit");
	}
};

struct Context : cuda_delete<CUcontext, cuCtxDestroy>::handle_type
{
	MOVE_GENERATE(Context, MOVE_2, BASE, unique_handle, MEMBER, device)

	CUdevice device;

	explicit Context(unsigned int flags = 0)
	{
		THROW_CUDA_ERROR(cuDeviceGet(&device, 0), "cuDeviceGet");

		char deviceName[2048];
		THROW_CUDA_ERROR( cuDeviceGetName(deviceName, arraylen(deviceName), device), "Unable to query device name.");
		std::cout << "CUDA Device: " << deviceName << std::endl;

		THROW_CUDA_ERROR(cuCtxCreate(rebind(), flags, device), "cuDeviceGet");
	}
};

struct CommandStream : cuda_delete<CUstream, cuStreamDestroy>::handle_type
{
	MOVE_BASE(CommandStream, unique_handle)

	// Default stream
	CommandStream(nullptr_t) { }
	// New stream
	explicit CommandStream(CUcontext ctx, unsigned int flags = CU_STREAM_DEFAULT)
	{
		THROW_CUDA_ERROR(cuStreamCreate(rebind(), flags), "cuStreamCreate");
	}
};

struct Program : cuda_delete<CUmodule, cuModuleUnload>::handle_type
{
	MOVE_BASE(Program, unique_handle)

	Program(nullptr_t) { }
	Program(CUcontext context, char const* binary)
	{
		CUjit_option opt[] = { CU_JIT_TARGET_FROM_CUCONTEXT };
		void* val[arraylen(opt)] = { nullptr };
		THROW_CUDA_ERROR(cuModuleLoadDataEx(rebind(), binary, (unsigned) arraylen(opt), opt, val), "cuModuleLoadDataEx");
	}

	static Program fromFile(CUcontext context, char const* file)
	{
		return Program(context, stdx::load_binary_file(file, true).data());
	}
};

struct Kernel : cuda_no_delete<CUfunction>::handle_type
{
	MOVE_BASE(Kernel, unique_handle)

	Kernel(nullptr_t) { }
	Kernel(CUmodule module, char const* name)
	{
		THROW_CUDA_ERROR(cuModuleGetFunction(rebind(), module, name), "cuModuleGetFunction");
	}

	template <class T>
	static T ceil_div(T x, T d)
	{
		return (x + d - 1) / d;
	}
	template <class T>
	static T ceil_mul(T x, T d)
	{
		auto r = x % d;
		return (r == 0) ? x : x + d - r;
	}

	struct arg_pointers { void** kernelParameters; };
	struct arg_stream_seed
	{
		operator arg_pointers() const { arg_pointers p = { nullptr }; return p; }
	};
	template <class Type, class Prev = arg_stream_seed>
	struct arg_stream
	{
		Prev prev;
		Type const* ptr;

		operator arg_pointers() const { arg_pointers p = { (void**) &prev }; return p; }
	};
	template <class Type>
	struct arg_stream<Type, arg_stream_seed>
	{
		Type const* ptr;

		operator arg_pointers() const { arg_pointers p = { (void**) &ptr }; return p; }
	};

	template <class T>
	friend arg_stream<T> operator <<(arg_stream_seed const& start, T const& arg)
	{
		arg_stream<T> result = { &arg };
		return result;
	}
	template <class T, class PrevT, class PrevP>
	friend arg_stream<T, arg_stream<PrevT, PrevP>> operator <<(arg_stream<PrevT, PrevP> const& prev, T const& arg)
	{
		arg_stream<T, arg_stream<PrevT, PrevP>> result = { prev, &arg };
		return result;
	}
	
	arg_stream_seed args() const { return arg_stream_seed(); }
	
	void launch(CUstream stream, size_t globalX, size_t localX, arg_pointers args = arg_stream_seed()) const
	{
		THROW_CUDA_ERROR(
			cuLaunchKernel(*this, (unsigned) ceil_div(globalX, localX), 1, 1, (unsigned) localX, 1, 1, 0, stream, args.kernelParameters, nullptr),
			"Failed to launch CUDA kernel");
	}
	void launch(CUstream stream, size_t globalX, size_t globalY, size_t localX, size_t localY, arg_pointers args = arg_stream_seed()) const
	{
		THROW_CUDA_ERROR(
			cuLaunchKernel(*this, (unsigned) ceil_div(globalX, localX), (unsigned) ceil_div(globalY, localY), 1
				, (unsigned) localX, (unsigned) localY, 1, 0, stream, args.kernelParameters, nullptr),
			"Failed to launch CUDA kernel");
	}
	void launch(CUstream stream, size_t globalX, size_t globalY, size_t globalZ, size_t localX, size_t localY, size_t localZ, arg_pointers args = arg_stream_seed()) const
	{
		THROW_CUDA_ERROR(
			cuLaunchKernel(*this, (unsigned) ceil_div(globalX, localX), (unsigned) ceil_div(globalY, localY), (unsigned) ceil_div(globalZ, localZ)
				, (unsigned) localX, (unsigned) localY, (unsigned) localZ, 0, stream, args.kernelParameters, nullptr),
			"Failed to launch CUDA kernel");
	}
};

struct Event : cuda_delete<CUevent, cuEventDestroy>::handle_type
{
	MOVE_BASE(Event, unique_handle)

	Event(nullptr_t) { }
	explicit Event(CUevent event)
		: unique_handle(event) { }
	explicit Event(CUstream stream, unsigned int flags = CU_EVENT_DEFAULT)
	{
		THROW_CUDA_ERROR(cuEventCreate(rebind(), flags), "Failed to create CUDA event");
	}

	void record(CUstream stream)
	{
		THROW_CUDA_ERROR(cuEventRecord(*this, stream), "Failed to record CUDA event");
	}
};

inline double diffMS(CUevent startEvent, CUevent endEvent)
{
	float elapsedMs = 0.0f;
	cuEventSynchronize(endEvent);
	THROW_CUDA_ERROR(cuEventElapsedTime(&elapsedMs, startEvent, endEvent), "cuEventElapsedTime");
	return (double) elapsedMs;
}

struct Buffer : cuda_delete<CUdeviceptr, cuMemFree>::handle_type
{
	MOVE_BASE(Buffer, unique_handle)

	Buffer(nullptr_t) { }
	Buffer(CUcontext context, size_t size)
	{
		THROW_CUDA_ERROR( cuMemAlloc(rebind(), size), "cuMemAlloc" );
	}
	Buffer(CUcontext context, void const* data, size_t size)
	{
		*this = Buffer(context, size);
		if (data) writeBytes(nullptr, data, size);
	}

	void writeBytes(CUstream stream, void const* data, size_t size)
	{
		THROW_CUDA_ERROR( cuMemcpyHtoD(*this, data, size), "cuMemcpyHtoD" );
	}
	void readBytes(CUstream stream, void* data, size_t size)
	{
		THROW_CUDA_ERROR( cuMemcpyDtoH(data, *this, size), "cuMemcpyDtoH" );
	}

	template <class T>
	void write(CUstream stream, T const* data, size_t count)
	{
		writeBytes(stream, data, sizeof(T) * count);
	}
	template <class T>
	void read(CUstream stream, T* data, size_t count)
	{
		readBytes(stream, data, sizeof(T) * count);
	}

	template <class T>
	Buffer create(CUstream stream, T* data, size_t count)
	{
		return Buffer(stream, data, sizeof(T) * count);
	}
	template <class Range>
	Buffer create(CUstream stream, Range const& range)
	{
		return Buffer(stream, range.data(), sizeof(*range.data()) * range.size());
	}
};

inline size_t format_bytes(CUarray_format format)
{
	switch (format)
	{
	case CU_AD_FORMAT_SIGNED_INT8:
	case CU_AD_FORMAT_UNSIGNED_INT8:
		return 1;
	case CU_AD_FORMAT_SIGNED_INT16:
	case CU_AD_FORMAT_UNSIGNED_INT16:
	case CU_AD_FORMAT_HALF:
		return 2;
	case CU_AD_FORMAT_SIGNED_INT32:
	case CU_AD_FORMAT_UNSIGNED_INT32:
	case CU_AD_FORMAT_FLOAT:
		return 4;
	default:
		assert(false);
		return 0;
	}
}

inline void memcpy(CUarray dest, void const* data, unsigned numChannels, CUarray_format format, size_t w, size_t h, size_t d = 1)
{
	CUDA_MEMCPY3D memcpy = { 0 };
	memcpy.WidthInBytes = format_bytes(format) * numChannels * w;
	memcpy.Height = h;
	memcpy.Depth = d;
	memcpy.srcMemoryType = CU_MEMORYTYPE_HOST;
	memcpy.srcHost = data;
	memcpy.srcPitch = memcpy.WidthInBytes;
	memcpy.srcHeight = memcpy.Height;
	memcpy.dstMemoryType = CU_MEMORYTYPE_ARRAY;
	memcpy.dstArray = dest;
	THROW_CUDA_ERROR(cuMemcpy3D(&memcpy), "cuMemcpy3D");
}

struct Image : cuda_delete<CUarray, cuArrayDestroy>::handle_type
{
	MOVE_BASE(Image, unique_handle)

	Image(nullptr_t) { }
	Image(CUcontext context, unsigned numChannels, CUarray_format format, size_t w, size_t h, size_t d, void const* data, unsigned flags)
	{
		CUDA_ARRAY3D_DESCRIPTOR desc = { 0 };
		desc.Width = w;
		desc.Height = h;
		desc.Depth = d;
		desc.Format = format;
		desc.NumChannels = numChannels;
		desc.Flags = flags;
		THROW_CUDA_ERROR(cuArray3DCreate(rebind(), &desc), "cuArray3DCreate");

		if (data)
			memcpy(*this, data, numChannels, format, w, h, d);
	}

	static Image create2D(CUcontext context, unsigned numChannels, CUarray_format format, size_t w, size_t h, void const* data = nullptr, unsigned flags = 0)
	{
		return Image(context, numChannels, format, w, h, 0, data, flags);
	}
	static Image create3D(CUcontext context, unsigned numChannels, CUarray_format format, size_t w, size_t h, size_t d, void const* data = nullptr, unsigned flags = 0)
	{
		return Image(context, numChannels, format, w, h, d, data, flags);
	}
};

struct MippedImage : cuda_delete<CUmipmappedArray, cuMipmappedArrayDestroy>::handle_type
{
	MOVE_BASE(MippedImage, unique_handle)

	MippedImage(nullptr_t) { }
	MippedImage(CUcontext context, unsigned numChannels, CUarray_format format, size_t w, size_t h, size_t d, size_t levels, void const* data, unsigned flags)
	{
		CUDA_ARRAY3D_DESCRIPTOR desc = { 0 };
		desc.Width = w;
		desc.Height = h;
		desc.Depth = d;
		desc.Format = format;
		desc.NumChannels = numChannels;
		desc.Flags = flags;
		THROW_CUDA_ERROR(cuMipmappedArrayCreate(rebind(), &desc, (unsigned) levels), "cuMipmappedArrayCreate");

		if (data)
			memcpy(subImage(0), data, numChannels, format, w, h, d);
	}

	static MippedImage create2D(CUcontext context, unsigned numChannels, CUarray_format format, size_t w, size_t h, size_t levels,
		void const* data = nullptr, unsigned flags = 0)
	{
		return MippedImage(context, numChannels, format, w, h, 0, levels, data, flags);
	}
	static MippedImage create3D(CUcontext context, unsigned numChannels, CUarray_format format, size_t w, size_t h, size_t d, size_t levels,
		void const* data = nullptr, unsigned flags = 0)
	{
		return MippedImage(context, numChannels, format, w, h, d, levels, data, flags);
	}

	CUarray subImage(size_t level = 0)
	{
		CUarray result;
		THROW_CUDA_ERROR( cuMipmappedArrayGetLevel(&result, *this, (unsigned) level), "cuMipmappedArrayGetLevel" );
		return result;
	}
};

inline CUDA_RESOURCE_DESC resource_desc(CUdeviceptr res, size_t size, unsigned numChannels, CUarray_format format)
{
	CUDA_RESOURCE_DESC rd = { };
	rd.res.linear.devPtr = res;
	rd.res.linear.sizeInBytes = size;
	rd.res.linear.numChannels = numChannels;
	rd.res.linear.format = format;
	rd.resType = CU_RESOURCE_TYPE_LINEAR;
	return rd;
}
inline CUDA_RESOURCE_DESC resource_desc(CUarray res)
{
	CUDA_RESOURCE_DESC rd = { };
	rd.res.array.hArray = res;
	rd.resType = CU_RESOURCE_TYPE_ARRAY;
	return rd;
}
inline CUDA_RESOURCE_DESC resource_desc(CUmipmappedArray res)
{
	CUDA_RESOURCE_DESC rd = { };
	rd.res.mipmap.hMipmappedArray = res;
	rd.resType = CU_RESOURCE_TYPE_MIPMAPPED_ARRAY;
	return rd;
}

inline CUDA_TEXTURE_DESC linear_texture_desc(CUaddress_mode addressMode = CU_TR_ADDRESS_MODE_CLAMP,
											 bool normalizedCoords = true,
											 bool srgb = false,
											 bool normalizedInts = true,
											 CUfilter_mode mipFilterMode = CU_TR_FILTER_MODE_LINEAR,
											 CUfilter_mode filterMode = CU_TR_FILTER_MODE_LINEAR)
{
	CUDA_TEXTURE_DESC d = { };
	d.filterMode = filterMode;
	d.addressMode[0] = d.addressMode[1] = d.addressMode[2] = addressMode;
	d.maxMipmapLevelClamp = 2.0e16f;
	d.mipmapFilterMode = mipFilterMode;
	if (normalizedCoords)
		d.flags |= CU_TRSF_NORMALIZED_COORDINATES;
	if (!normalizedInts)
		d.flags |= CU_TRSF_READ_AS_INTEGER;
	return d;
}

inline CUDA_TEXTURE_DESC point_texture_desc(CUaddress_mode addressMode = CU_TR_ADDRESS_MODE_CLAMP,
											bool normalizedCoords = true,
											bool srgb = false,
											bool normalizedInts = true,
											CUfilter_mode mipFilterMode = CU_TR_FILTER_MODE_POINT,
											CUfilter_mode filterMode = CU_TR_FILTER_MODE_POINT)
{
	return linear_texture_desc(addressMode, normalizedCoords, srgb, normalizedInts, mipFilterMode, filterMode);
}

struct Texture : cuda_delete<CUtexObject, cuTexObjectDestroy>::handle_type
{
	MOVE_BASE(Texture, unique_handle)

	Texture(nullptr_t) { }
	Texture(CUcontext context, CUDA_RESOURCE_DESC const& resDesc, CUDA_TEXTURE_DESC const& texDesc, CUDA_RESOURCE_VIEW_DESC const* pRVDesc = nullptr)
	{
		THROW_CUDA_ERROR(cuTexObjectCreate(rebind(), &resDesc, &texDesc, pRVDesc), "cuTexObjectCreate");
	}
	template <class Res>
	Texture(CUcontext context, Res const& res, CUDA_TEXTURE_DESC const& texDesc, CUDA_RESOURCE_VIEW_DESC const* pRVDesc = nullptr)
	{
		*this = Texture(context, resource_desc(res), texDesc, pRVDesc);
	}
};

inline CUDA_RESOURCE_DESC surface_resource_desc(CUarray res)
{
	return resource_desc(res);
}

struct Surface : cuda_delete<CUsurfObject, cuSurfObjectDestroy>::handle_type
{
	MOVE_BASE(Surface, unique_handle)

	Surface(nullptr_t) { }
	Surface(CUcontext context, CUDA_RESOURCE_DESC const& resDesc)
	{
		THROW_CUDA_ERROR(cuSurfObjectCreate(rebind(), &resDesc), "cuTexObjectCreate");
	}
	template <class Res>
	Surface(CUcontext context, Res const& res)
	{
		*this = Surface(context, surface_resource_desc(res));
	}
};

struct GlBuffer : cuda_no_delete<CUgraphicsResource>::handle_type
{
	MOVE_BASE(GlBuffer, unique_handle)

	GlBuffer(nullptr_t) { }
	GlBuffer(CUcontext context, GLuint glBuffer, unsigned int flags = CU_GRAPHICS_REGISTER_FLAGS_NONE)
	{
		THROW_CUDA_ERROR( cuGraphicsGLRegisterBuffer(rebind(), glBuffer, flags), "cuGraphicsGLRegisterBuffer" );
	}

	void bind(CUstream stream)
	{
		THROW_CUDA_ERROR( cuGraphicsMapResources(1, (CUgraphicsResource*) &get(), stream), "cuGraphicsMapResources" );
	}
	void unbind(CUstream stream)
	{
		THROW_CUDA_ERROR( cuGraphicsUnmapResources(1, (CUgraphicsResource*) &get(), stream), "cuGraphicsMapResources" );
	}

	CUdeviceptr pointer(size_t *pSize = nullptr)
	{
		CUdeviceptr result;
		THROW_CUDA_ERROR( cuGraphicsResourceGetMappedPointer(&result, pSize, *this), "cuGraphicsResourceGetMappedPointer" );
		return result;
	}
};

struct GlTexture : cuda_no_delete<CUgraphicsResource>::handle_type
{
	MOVE_BASE(GlTexture, unique_handle)

	GlTexture(nullptr_t) { }
	GlTexture(CUcontext context, GLenum glTextureType, GLuint glTexture, unsigned int flags = CU_GRAPHICS_REGISTER_FLAGS_NONE)
	{
		THROW_CUDA_ERROR( cuGraphicsGLRegisterImage(rebind(), glTexture, glTextureType, flags), "cuGraphicsGLRegisterImage" );
	}

	void bind(CUstream stream)
	{
		THROW_CUDA_ERROR( cuGraphicsMapResources(1, (CUgraphicsResource*) &get(), stream), "cuGraphicsMapResources" );
	}
	void unbind(CUstream stream)
	{
		THROW_CUDA_ERROR( cuGraphicsUnmapResources(1, (CUgraphicsResource*) &get(), stream), "cuGraphicsMapResources" );
	}

	CUarray subImage(size_t level = 0, size_t element = 0)
	{
		CUarray result;
		THROW_CUDA_ERROR( cuGraphicsSubResourceGetMappedArray(&result, *this, (unsigned) element, (unsigned) level), "cuGraphicsSubResourceGetMappedArray" );
		return result;
	}
	CUmipmappedArray mippedImage()
	{
		CUmipmappedArray result;
		THROW_CUDA_ERROR( cuGraphicsResourceGetMappedMipmappedArray(&result, *this), "cuGraphicsResourceGetMappedPointer" );
		return result;
	}
};

inline CUDA_RESOURCE_DESC resource_desc(GlTexture& res)
{
	return resource_desc(res.mippedImage());
}
inline CUDA_RESOURCE_DESC surface_resource_desc(GlTexture& res)
{
	return resource_desc(res.subImage());
}

template <class T>
struct BindGuard
{
	CUstream stream;
	stdx::unique_handle<T*> bound;

	MOVE_GENERATE(BindGuard, MOVE_2, MEMBER, stream, MEMBER, bound)

	BindGuard(CUstream stream, T &bound)
		: stream(stream),
		bound(&bound)
	{
		bound.bind(stream);
	}
	~BindGuard()
	{
		if (bound.valid())
			bound.get()->unbind(stream);
	}

	void disarm() { bound = nullptr; }
};

template <class T>
inline BindGuard<T> bind_guarded(CUstream stream, T &bound) { return BindGuard<T>(stream, bound); }

struct ProgramWithTime : Program
{
	char const* preamble;
	std::string file;
	time_t time;

	using Program::operator =;

	explicit ProgramWithTime(CUcontext context, std::string file)
		: Program(nullptr)
		, preamble(preamble)
		, file(std::move(file))
		, time(0)
	{
		load(context);
	}
	void load(CUcontext context)
	{
		*this = Program::fromFile(context, file.c_str());
		time = stdx::file_time(file.c_str());
	}
	int maybeReload(CUcontext context)
	{
		if (stdx::file_time(file.c_str()) > time)
		{
			try { load(context); return 1; }
			catch (cuda_error const &) { return -1; }
		}
		return 0;
	}
};

struct KernelWithTime : Kernel
{
	ProgramWithTime const* module;
	char const* kernelName;
	time_t time;

	using Kernel::operator =;

	explicit KernelWithTime(ProgramWithTime const* module, char const* kernelName)
		: Kernel(nullptr)
		, module(module)
		, kernelName(kernelName)
		, time(0)
	{
		load();
	}
	void load()
	{
		*this = Kernel(*module, kernelName);
		time = module->time;
	}
	int maybeReload()
	{
		if (module->time > time)
		{
			try { load(); return 1; }
			catch (cuda_error const &) { return -1; }
		}
		return 0;
	}
};

} // namespace
