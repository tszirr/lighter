#pragma once

#include "oglbase"
#include "oclbase"

#ifndef DEFAULT_ASSIGN_NULL_REFERENCE
	#define DEFAULT_ASSIGN_NULL_REFERENCE = nullptr
#endif

#define CL_MEM_WRITE_ACCESS_FLAG_MASK (CL_MEM_READ_WRITE | CL_MEM_WRITE_ONLY | CL_MEM_READ_ONLY)
#define GL_SHARING_EXTENSION "cl_khr_gl_sharing"

#include "stdx"
#include "filex"

#include <algorithm>
#include <iostream>
#include <string>

namespace ocl
{

struct ContextRef : cl_destroy<ContextRef, cl_context, clReleaseContext>
{
	ContextRef(cl_context ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }
};

struct cl_context_with_device
{
	cl_context context;
	cl_device_id device;

	operator cl_context() const { return context; }
};

struct ContextRefWithDevice : ContextRef
{
	typedef stdx::own<ContextRefWithDevice> owned;

	cl_platform_id platform;
	cl_device_id device;

	ContextRefWithDevice(ContextRef ref DEFAULT_ASSIGN_NULL_REFERENCE, cl_platform_id platform = nullptr, cl_device_id device = nullptr)
		: ContextRef(ref)
		, platform(platform)
		, device(device) { }

	operator cl_context_with_device() const
	{
		cl_context_with_device r = { ref, device };
		return r;
	}
};

struct Context : ContextRefWithDevice::owned
{
	MOVE_BASE(Context, owned)

	Context(nullptr_t)
		: owned( ContextRefWithDevice(nullptr) ) { }
	explicit Context(cl_context ref, cl_platform_id platform = nullptr, cl_device_id device = nullptr)
		: owned( ContextRefWithDevice(ref, platform, device) ) { }

	explicit Context(cl_device_type deviceType = CL_DEVICE_TYPE_GPU, bool enableGLSharing = true)
		: owned(nullptr)
	{
		{
			cl_platform_id platformIDs[16];
			cl_uint numPlatformIDs = 0;
			THROW_OPENCL_ERROR( clGetPlatformIDs(arraylen(platformIDs), platformIDs, &numPlatformIDs), "Failed to get CL platform IDs" );

			cl_int err = CL_DEVICE_NOT_FOUND;
			for (cl_uint i = 0; i < numPlatformIDs; ++i)
			{
				err = clGetDeviceIDs(platformIDs[i], deviceType, 1, &device, nullptr);
				if (err == CL_SUCCESS)
				{
					platform = platformIDs[i];
					break;
				}
			}
			THROW_OPENCL_ERROR(err, "No matching device found.");
		}

		char deviceName[2048];
		THROW_OPENCL_ERROR( clGetDeviceInfo(device, CL_DEVICE_NAME, arraylen(deviceName), &deviceName, nullptr), "Unable to query device name.");
		std::cout << "OpenCL Device: " << deviceName << std::endl;

		if (enableGLSharing)
		{
			size_t extensionSize;
			THROW_OPENCL_ERROR( clGetDeviceInfo(device, CL_DEVICE_EXTENSIONS, 0, nullptr, &extensionSize), "Failed to get OpenCL extensions");
			std::string extensions(extensionSize, '\0');
			THROW_OPENCL_ERROR( clGetDeviceInfo(device, CL_DEVICE_EXTENSIONS, extensions.size(), &extensions[0], &extensionSize), "Failed to get OpenCL extensions");

			bool sharingSupported = false;

			for (auto extBegin = extensions.c_str(), extEnd = extBegin + extensions.size(); extBegin < extEnd; )
			{
				auto extDelim = std::find(extBegin, extEnd, ' ');

				if (std::search(extBegin, extDelim, GL_SHARING_EXTENSION, stdx::strend(GL_SHARING_EXTENSION)) != extDelim)
				{
					sharingSupported = true;
					break;
				}

				extBegin = extDelim + 1;
			}

			if(!sharingSupported)
				throwx( ocl_error("OpenCL sharing unsupported") );

			cl_context_properties const props[] = 
			{
				CL_GL_CONTEXT_KHR, (cl_context_properties) wglGetCurrentContext(), 
				CL_WGL_HDC_KHR, (cl_context_properties) wglGetCurrentDC(), 
				CL_CONTEXT_PLATFORM, (cl_context_properties) platform, 
				0
			};
			cl_int error;
			ref = clCreateContext(props, 1, &device, nullptr, nullptr, &error);
			THROW_OPENCL_ERROR( error, "Failed to create OpenCL context");
		}
		else
		{
			cl_context_properties const props[] = 
			{
				CL_CONTEXT_PLATFORM, (cl_context_properties) platform, 
				0
			};
			cl_int error;
			ref = clCreateContext(props, 1, &device, nullptr, nullptr, &error);
			THROW_OPENCL_ERROR( error, "Failed to create OpenCL context");
		}
	}
};

struct CommandStreamRef : cl_destroy<CommandStreamRef, cl_command_queue, clReleaseCommandQueue>
{
	CommandStreamRef(cl_command_queue ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }
};

struct CommandStream : CommandStreamRef::owned
{
	MOVE_BASE(CommandStream, owned)

	CommandStream(nullptr_t DEFAULT_ASSIGN_NULL_REFERENCE) : owned(nullptr) { }
	explicit CommandStream(cl_command_queue ref) : owned(ref) { }

	explicit CommandStream(cl_context_with_device context, bool profiling = true)
		: owned(nullptr)
	{
		cl_command_queue_properties const props = (profiling) ? CL_QUEUE_PROFILING_ENABLE : 0;

		cl_int error;
		ref = clCreateCommandQueue(context, context.device, props, &error);
		THROW_OPENCL_ERROR(error, "Failed to create the command queue in the OpenCL context");
	}
};

struct ProgramRef : cl_destroy<ProgramRef, cl_program, clReleaseProgram>
{
	ProgramRef(cl_program ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }

	static owned fromSource(cl_context_with_device context, char const* source, char const* preamble = "")
	{
		owned r = nullptr;

		char const* sources[] = { preamble, source };

		cl_int error;
		r.ref = clCreateProgramWithSource(context, 2, sources, nullptr, &error);
		THROW_OPENCL_ERROR(error, "Failed to create OpenCL program");

		error = clBuildProgram(r, 1, &context.device, nullptr, nullptr, nullptr);
		if(error != CL_SUCCESS)
		{
			printBuildLog(r, context.device);
			THROW_OPENCL_ERROR(error, "Failed to build OpenCL program");
		}

		return r;
	}
	
	static owned fromFile(cl_context_with_device context, char const* file, char const* preamble = "")
	{
		return fromSource(context, stdx::load_file(file).c_str(), preamble);
	}

	static void printBuildLog(cl_program program, cl_device_id device)
	{
		cl_build_status buildStatus;
		THROW_OPENCL_ERROR(clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_STATUS, sizeof(cl_build_status), &buildStatus, nullptr), "Failed to retrieve OpenCL build status");
		if (buildStatus == CL_SUCCESS)
			return;

		size_t logSize;
		THROW_OPENCL_ERROR(clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_LOG, 0, nullptr, &logSize), "Failed to retrieve OpenCL build log");
		std::string log(logSize, 0);
		THROW_OPENCL_ERROR(clGetProgramBuildInfo(program, device, CL_PROGRAM_BUILD_LOG, log.size(), &log[0], nullptr), "Failed to retrieve OpenCL build log");

		std::cout << "There were build errors:" << std::endl;
		std::cout << log << std::endl;
	}
};
typedef ProgramRef::owned Program;

struct KernelRef : cl_destroy<KernelRef, cl_kernel, clReleaseKernel>
{
	KernelRef(cl_kernel ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }

	static owned fromProgram(cl_program program, char const* name)
	{
		owned r = nullptr;
		cl_int error;
		r.ref = clCreateKernel(program, name, &error);
		THROW_OPENCL_ERROR(error, "Failed to create OpenCL kernel");
		return r;
	}

	static owned fromSource(cl_context_with_device context, char const* source, char const* name)
	{
		return fromProgram(Program::fromSource(context, source), name);
	}
	static owned fromFile(cl_context_with_device context, char const* file, char const* name)
	{
		return fromProgram(Program::fromFile(context, file), name);
	}

	template <class T>
	static T ceil_div(T x, T d)
	{
		return (x + d - 1) / d;
	}
	template <class T>
	static T ceil_mul(T x, T d)
	{
		auto r = x % d;
		return (r == 0) ? x : x + d - r;
	}

	template <class T>
	KernelRef& allocate(unsigned idx, size_t N = 1)
	{
		THROW_OPENCL_ERROR( clSetKernelArg(*this, idx, sizeof(T) * N, nullptr), "Failed to allocate OpenCl kernel argument");
		return *this;
	}
	
	struct memory_arg { size_t bytes; memory_arg(size_t bytes) : bytes(bytes) { } };
	static memory_arg memoryBytes(size_t bytes) { return memory_arg(bytes); }
	template <class T>
	static memory_arg memory(size_t count) { return memory_arg(sizeof(T) * count); }
	template <class T>
	KernelRef& set(unsigned idx, T const& arg)
	{
		THROW_OPENCL_ERROR( clSetKernelArg(*this, idx, sizeof(T), &arg), "Failed to set OpenCl kernel argument");
		return *this;
	}
	// trigger implicit cl_mem casts
	KernelRef& set(unsigned idx, cl_mem arg)
	{
		set<cl_mem>(idx, arg);
		return *this;
	}
	KernelRef& set(unsigned idx, memory_arg const& arg)
	{
		allocate<char>(idx, arg.bytes);
		return *this;
	}
	
	struct arg_stream
	{
		KernelRef *const k;
		unsigned idx;

		template <class T>
		arg_stream operator <<(T const& arg) const
		{
			auto result(*this);
			k->set(result.idx++, arg);
			return result;
		}
	};
	arg_stream args(unsigned startIdx = 0) { arg_stream r = { this, startIdx }; return r; }
	
	void launch(cl_command_queue stream, size_t globalX, size_t localX) const
	{
		size_t globalSize[] = { ceil_mul(globalX, localX) };
		size_t localSize[] = { localX };
		THROW_OPENCL_ERROR(
			clEnqueueNDRangeKernel(stream, *this, arraylen(globalSize), nullptr, globalSize, localSize, 0, nullptr, nullptr),
			"Failed to launch OpenCl kernel");
	}
	void launch(cl_command_queue stream, size_t globalX, size_t globalY, size_t localX, size_t localY) const
	{
		size_t globalSize[] = { ceil_mul(globalX, localX), ceil_mul(globalY, localY) };
		size_t localSize[] = { localX, localY };
		THROW_OPENCL_ERROR(
			clEnqueueNDRangeKernel(stream, *this, arraylen(globalSize), nullptr, globalSize, localSize, 0, nullptr, nullptr),
			"Failed to launch OpenCl kernel");
	}
	void launch(cl_command_queue stream, size_t globalX, size_t globalY, size_t globalZ, size_t localX, size_t localY, size_t localZ) const
	{
		size_t globalSize[] = { ceil_mul(globalX, localX), ceil_mul(globalY, localY), ceil_mul(globalZ, localZ) };
		size_t localSize[] = { localX, localY, localZ };
		THROW_OPENCL_ERROR(
			clEnqueueNDRangeKernel(stream, *this, arraylen(globalSize), nullptr, globalSize, localSize, 0, nullptr, nullptr),
			"Failed to launch OpenCl kernel");
	}
};
typedef KernelRef::owned Kernel;

struct EventRef : cl_destroy<EventRef, cl_event, clReleaseEvent>
{
	EventRef(cl_event ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }

	static owned create(cl_command_queue stream)
	{
		owned r = nullptr;
		THROW_OPENCL_ERROR(clEnqueueMarker(stream, &r.ref), "Failed to enqueue OpenCL event");
		return r;
	}

	cl_ulong timeNS()
	{
		cl_ulong time;

		cl_int error = clGetEventProfilingInfo(*this, CL_PROFILING_COMMAND_START, sizeof(cl_ulong), &time, NULL);
		if (error == CL_PROFILING_INFO_NOT_AVAILABLE)
		{
			error = clWaitForEvents(1, &ref);
			if (error == CL_SUCCESS)
				error = clGetEventProfilingInfo(*this, CL_PROFILING_COMMAND_START, sizeof(cl_ulong), &time, NULL);
		}
		THROW_OPENCL_ERROR(error,  "clGetEventProfilingInfo");

		return time;
	}
};
typedef EventRef::owned Event;

inline cl_ulong diffNS(EventRef startEvent, EventRef endEvent)
{
	auto end = endEvent.timeNS();
	auto start = startEvent.timeNS();
	return end - start;
}

inline double diffMS(EventRef startEvent, EventRef endEvent)
{
	return diffNS(startEvent, endEvent) / 1000000.0;
}

struct BufferRef : cl_destroy<BufferRef, cl_mem, clReleaseMemObject>
{
	BufferRef(cl_mem ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }

	static owned create(cl_context context, void const* data, size_t size, cl_mem_flags flags = CL_MEM_READ_WRITE)
	{
		owned r = nullptr;
		cl_int error;
		if (data && !(flags & CL_MEM_USE_HOST_PTR)) flags |= CL_MEM_COPY_HOST_PTR;
		r.ref = clCreateBuffer(context, flags, size, (void*) data, &error);
		THROW_OPENCL_ERROR(error, "Failed to create OpenCL buffer object");
		return r;
	}

	void writeBytes(cl_command_queue stream, void const* data, size_t size)
	{
		THROW_OPENCL_ERROR( clEnqueueWriteBuffer(stream, *this, CL_FALSE, 0, size, data, 0, nullptr, nullptr), "clEnqueueWriteBuffer" );
	}
	void readBytes(cl_command_queue stream, void* data, size_t size, cl_bool blocking = CL_TRUE)
	{
		THROW_OPENCL_ERROR( clEnqueueReadBuffer(stream, *this, blocking, 0, size, data, 0, nullptr, nullptr), "clEnqueueReadBuffer" );
	}

	template <class T>
	void write(cl_command_queue stream, T const* data, size_t count)
	{
		writeBytes(stream, data, sizeof(T) * count);
	}
	template <class T>
	void read(cl_command_queue stream, T* data, size_t count)
	{
		readBytes(stream, data, sizeof(T) * count);
	}

	template <class T>
	static owned init(cl_context context, T* data, size_t count, cl_mem_flags flags = CL_MEM_READ_WRITE)
	{
		return create(context, data, sizeof(T) * count, flags);
	}

	template <class Range>
	static owned init(cl_context context, Range const& range, cl_mem_flags flags = CL_MEM_READ_WRITE)
	{
		return create(context, range.data(), sizeof(*range.data()) * range.size(), flags);
	}
};
typedef BufferRef::owned Buffer;

struct ImageRef : cl_destroy<ImageRef, cl_mem, clReleaseMemObject>
{
	ImageRef(cl_mem ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }

	static owned create2D(cl_context context, cl_channel_order channelOrder, cl_channel_type channelType, size_t w, size_t h, void const* data = nullptr, cl_mem_flags flags = CL_MEM_READ_WRITE)
	{
		owned r = nullptr;
		cl_int error;
		cl_image_format format = { channelOrder, channelType };
		if (data && !(flags & CL_MEM_USE_HOST_PTR)) flags |= CL_MEM_COPY_HOST_PTR;
		r.ref = clCreateImage2D(context, flags, &format, w, h, 0, (void*) data, &error);
		THROW_OPENCL_ERROR(error, "Failed to create OpenCL image object");
		return r;
	}
	static owned create3D(cl_context context, cl_channel_order channelOrder, cl_channel_type channelType, size_t w, size_t h, size_t d, void const* data = nullptr, cl_mem_flags flags = CL_MEM_READ_WRITE)
	{
		owned r = nullptr;
		cl_int error;
		cl_image_format format = { channelOrder, channelType };
		if (data && !(flags & CL_MEM_USE_HOST_PTR)) flags |= CL_MEM_COPY_HOST_PTR;
		r.ref = clCreateImage3D(context, flags, &format, w, h, d, 0, 0, (void*) data, &error);
		THROW_OPENCL_ERROR(error, "Failed to create OpenCL volume object");
		return r;
	}
};
typedef ImageRef::owned Image;

inline size_t imageSizeInfo(cl_mem image, cl_image_info paramName)
{
	size_t result;
	THROW_OPENCL_ERROR( clGetImageInfo(image, paramName, sizeof(result), &result, nullptr), "clGetImageInfo" );
	return result;
}
inline size_t imageWidth(cl_mem image) { return imageSizeInfo(image, CL_IMAGE_WIDTH); }
inline size_t imageHeight(cl_mem image) { return imageSizeInfo(image, CL_IMAGE_HEIGHT); }
inline size_t imageDepth(cl_mem image) { return imageSizeInfo(image, CL_IMAGE_DEPTH); }
inline size_t imageElementSize(cl_mem image) { return imageSizeInfo(image, CL_IMAGE_ELEMENT_SIZE); }

inline void bufferToImage(cl_command_queue stream, cl_mem buffer, cl_mem image,
						  size_t offsetX = 0, size_t sizeX = -1,
						  size_t offsetY = 0, size_t sizeY = -1,
						  size_t offsetZ = 0, size_t sizeZ = -1)
{
	if (sizeX == -1) sizeX = imageWidth(image);
	if (sizeY == -1) sizeY = imageHeight(image);
	if (sizeZ == -1) { sizeZ = imageDepth(image); if (sizeZ == 0) sizeZ = 1; }

	size_t offset[3] = { offsetX, offsetY, offsetZ };
	size_t region[3] = { sizeX, sizeY, sizeZ };
	THROW_OPENCL_ERROR( clEnqueueCopyBufferToImage(stream, buffer, image, 0, offset, region, 0, nullptr, nullptr), "clEnqueueCopyBufferToImage" );
}

struct BufferedVolume
{
	Image volume;
	Buffer buffer;

	MOVE_GENERATE(BufferedVolume, MOVE_2, MEMBER, volume, MEMBER, buffer)

	BufferedVolume(std::nullptr_t)
		: volume(nullptr)
		, buffer(nullptr) { }
	BufferedVolume(cl_context context, cl_channel_order channelOrder, cl_channel_type channelType, size_t w, size_t h, size_t d, void const* data, cl_mem_flags flags = 0)
		: volume( Image::create3D(context, channelOrder, channelType, w, h, d, data, (flags & CL_MEM_WRITE_ACCESS_FLAG_MASK) ? flags : flags | CL_MEM_READ_ONLY) )
		, buffer( Buffer::create(context, nullptr, w * h * d * ocl::imageElementSize(volume), (flags & CL_MEM_WRITE_ACCESS_FLAG_MASK) ? flags : flags | CL_MEM_WRITE_ONLY) )
	{
	}

	void copyToVolume(cl_command_queue stream) { bufferToImage(stream, buffer, volume); }
};

struct GlBufferRef : cl_destroy<GlBufferRef, cl_mem, clReleaseMemObject>
{
	GlBufferRef(cl_mem ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }

	static owned from(cl_context context, GLuint glBuffer, cl_mem_flags flags = CL_MEM_READ_WRITE)
	{
		owned r = nullptr;
		cl_int error;
		r.ref = clCreateFromGLBuffer(context, flags, glBuffer, &error);
		THROW_OPENCL_ERROR(error, "Failed to create OpenCL buffer object");
		return r;
	}

	void bind(cl_command_queue stream)
	{
		THROW_OPENCL_ERROR( clEnqueueAcquireGLObjects(stream, 1, &ref, 0, nullptr, nullptr), "clEnqueueAcquireGLObjects()" );
	}

	void unbind(cl_command_queue stream)
	{
		THROW_OPENCL_ERROR( clEnqueueReleaseGLObjects(stream, 1, &ref, 0, nullptr, nullptr), "clEnqueueReleaseGLObjects()" );
	}
};
typedef GlBufferRef::owned GlBuffer;

struct GlTextureRef : cl_destroy<GlTextureRef, cl_mem, clReleaseMemObject>
{
	GlTextureRef(cl_mem ref DEFAULT_ASSIGN_NULL_REFERENCE) { this->ref = ref; }

	static owned from(cl_context context, GLenum glTextureType, GLuint glTexture, cl_mem_flags flags = CL_MEM_READ_WRITE, size_t mipLevel = 0)
	{
		owned r = nullptr;
		cl_int error;
		if (glTextureType != GL_TEXTURE_3D && glTextureType != GL_TEXTURE_2D_ARRAY)
			r.ref = clCreateFromGLTexture2D(context, flags, glTextureType, (GLint) mipLevel, glTexture, &error);
		else
			r.ref = clCreateFromGLTexture3D(context, flags, glTextureType, (GLint) mipLevel, glTexture, &error);
		THROW_OPENCL_ERROR(error, "Failed to create OpenCL texture object");
		return r;
	}

	void bind(cl_command_queue stream)
	{
		THROW_OPENCL_ERROR( clEnqueueAcquireGLObjects(stream, 1, &ref, 0, nullptr, nullptr), "clEnqueueAcquireGLObjects()" );
	}

	void unbind(cl_command_queue stream)
	{
		THROW_OPENCL_ERROR( clEnqueueReleaseGLObjects(stream, 1, &ref, 0, nullptr, nullptr), "clEnqueueReleaseGLObjects()" );
	}
};
typedef GlTextureRef::owned GlTexture;

struct GlGuard : stdx::noncopyable
{
	cl_command_queue stream;

	GlGuard(cl_command_queue stream)
		: stream(stream)
	{
		glFinish();
		THROW_OPENGL_LASTERROR("glFinish()");
	}

	~GlGuard()
	{
		THROW_OPENCL_ERROR( clFinish(stream), "clFinish()" );
	}
};

template <class T>
struct BindGuard
{
	MOVE_GENERATE(BindGuard, MOVE_2, MEMBER, stream, MEMBER, bound)

	cl_command_queue stream;
	T* bound;

	BindGuard(nullptr_t)
		: bound(nullptr) { }
	BindGuard(cl_command_queue stream, T &bound)
		: stream(stream)
		, bound(&bound)
	{
		bound.bind(stream);
	}
	~BindGuard()
	{
		if (bound)
			bound->unbind(stream);
	}

	void disarm() { bound = nullptr; }
};

template <class T>
inline BindGuard<T> bind_guarded(cl_command_queue stream, T &bound) { return BindGuard<T>(stream, bound); }

struct ProgramWithTime : Program
{
	char const* preamble;
	std::string file;
	time_t time;

	using Program::operator =;

	explicit ProgramWithTime(cl_context_with_device context, std::string file, char const *preamble = "")
		: Program(nullptr)
		, preamble(preamble)
		, file(std::move(file))
		, time(0)
	{
		load(context);
	}
	static std::string resolveIncludes(std::string const& include, bool local)
	{
		return stdx::process_includes(stdx::load_file(include.c_str()), include.c_str(), resolveIncludes);
	}
	void load(cl_context_with_device context)
	{
		std::string src = stdx::process_includes(stdx::load_file(file.c_str()), file.c_str(), resolveIncludes);
		*this = Program::fromSource(context, src.c_str(), preamble);
		time = stdx::file_time(file.c_str());
	}
	int maybeReload(cl_context_with_device context)
	{
		if (stdx::file_time(file.c_str()) > time)
		{
			try { load(context); return 1; }
			catch (ocl_error const &) { return -1; }
		}
		return 0;
	}
};

struct KernelWithTime : Kernel
{
	ProgramWithTime const* program;
	char const* kernelName;
	time_t time;

	using Kernel::operator =;

	explicit KernelWithTime(ProgramWithTime const* program, char const* kernelName)
		: Kernel(nullptr)
		, program(program)
		, kernelName(kernelName)
		, time(0)
	{
		load();
	}
	void load()
	{
		*this = Kernel::fromProgram(*program, kernelName);
		time = program->time;
	}
	int maybeReload()
	{
		if (program->time > time)
		{
			try { load(); return 1; }
			catch (ocl_error const &) { return -1; }
		}
		return 0;
	}
};

} // namespace
