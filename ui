#pragma once

#include "ogl"

#include "stdx"
#include "mathx"

#include <algorithm>
#include <string>
#include <vector>

namespace ui
{

struct TextRenderer
{
	virtual glm::aabb<glm::ivec2> boundText(char const* text, glm::ivec2 insertPos = glm::ivec2(0)) = 0;
	virtual glm::aabb<glm::ivec2> drawText(glm::ivec2 insertPos, char const* text) = 0;
};

struct UiElement
{
	enum T
	{
		Frame,
		Bar
	};
};

struct UiRenderer
{
	struct QueuedWidget
	{
		unsigned xy;
		unsigned sizeXY;
		unsigned clazz;

		template <class T>
		static unsigned build_tuple(T x, T y)
		{
			return (unsigned) stdx::to_unsigned(x)
				| ((unsigned) stdx::to_unsigned(y) << unsigned(8 * sizeof(T)));
		}
	};

	ogl::Program* widgetProgram;
	ogl::VertexArrays widgetArrays;
	unsigned widgetBatchCnt, widgetBatchSize;
	std::unique_ptr<QueuedWidget[]> widgetMem;
	ogl::Buffer widgetBuffer;

	UiRenderer(ogl::Program* program, unsigned widgetBatchSize)
		: widgetProgram(move(program))
		, widgetArrays()
		, widgetBatchCnt(0)
		, widgetBatchSize(widgetBatchSize)
		, widgetMem(new QueuedWidget[widgetBatchSize])
		, widgetBuffer(ogl::Buffer::create(GL_ARRAY_BUFFER, widgetBatchSize * sizeof(QueuedWidget), nullptr, GL_STATIC_DRAW))
	{
		widgetArrays.bind();
		widgetBuffer.bind(GL_ARRAY_BUFFER);
		glVertexAttribIPointer(0, 3, GL_UNSIGNED_INT, 0, nullptr);
		glEnableVertexAttribArray(0);
		widgetBuffer.unbind(GL_ARRAY_BUFFER);
		widgetArrays.unbind();
	}

	void drawWidget(glm::ivec2 pos, glm::uvec2 size, UiElement::T clazz)
	{
		if (widgetBatchCnt >= widgetBatchSize)
			flushWidgets();

		QueuedWidget qc = { QueuedWidget::build_tuple( (short) pos.x, (short) pos.y )
			, QueuedWidget::build_tuple( (unsigned short) size.x, (unsigned short) size.y )
			, clazz };
		widgetMem[widgetBatchCnt] = qc;
		++widgetBatchCnt;
	}

	void flushWidgets()
	{
		if (widgetBatchCnt > 0)
		{
			widgetBuffer.write(GL_ARRAY_BUFFER, stdx::make_range_n(widgetMem.get(), widgetBatchCnt));
			
			widgetArrays.bind();
			widgetProgram->bind();
			glDrawArrays(GL_POINTS, 0, widgetBatchCnt);
			
			widgetBatchCnt = 0;
		}
	}
};

// online UI: max delayed group? -> forced delay ownership!
struct UiLayout
{
	void add(glm::ivec2 pos, glm::uvec2 size)
	{
	}
};

struct Ui
{
	void addButton()
	{
	}

	void addSlider(char const* data, float value)
	{
	}
};

template <class T, T V> struct GlobalObjectTag { union U { T p; char c; }; static U const tag; };
template <class T, T V> typename GlobalObjectTag<T, V>::U const GlobalObjectTag<T, V>::tag = { V };

template <class T>
struct GlobalObjectTagFromPtr {
	template <T P> static inline GlobalObjectTag<T, P> make() { return GlobalObjectTag<T, P>(); }
};
template <class T> GlobalObjectTagFromPtr<T*> inline GlobalObjectTagFromVal(T*) { return GlobalObjectTagFromPtr<T*>(); }
template <class T, class C> GlobalObjectTagFromPtr<T (C::*)> inline GlobalObjectTagFromVal(T (C::*)) { return GlobalObjectTagFromPtr<T (C::*)>(); }

#define UEI(v) &(::ui::GlobalObjectTagFromVal(v).template make<v>().tag)

struct UniqueElementIdentifier
{
	uintptr_t value;
	UniqueElementIdentifier(void const volatile* ptr)
		: value(reinterpret_cast<uintptr_t>(ptr)) { }
	UniqueElementIdentifier(uintptr_t value)
		: value(value) { }

	bool operator ==(UniqueElementIdentifier const& r) const { return value == r.value; }
};

struct Mouse
{
	bool primary, primaryChanged;
	bool secondary, secondaryChanged;
	glm::ivec2 pos;
}; 

struct CaptureState
{
	enum T
	{
		Available,
		Owned,
		Unavailable
	};
};

struct TextUi
{
	struct Options
	{
		unsigned indent, lineHeight;
		int labelDelta, controlBaseline;

		explicit Options(unsigned lineHeight = 24, unsigned indent = 10, int labelDelta = 16, int controlBaseline = -3) 
			: indent(indent)
			, lineHeight(lineHeight)
			, labelDelta(labelDelta)
			, controlBaseline(controlBaseline) { }
	} options;

	UiRenderer* uiRenderer;
	TextRenderer* textRenderer;
	
	Mouse mouse;

	std::vector<UniqueElementIdentifier> capturePath;
	std::vector<UniqueElementIdentifier> entryPath;
	std::vector<UniqueElementIdentifier> focusPath;

	TextUi(UiRenderer* uiRenderer, TextRenderer* textRenderer, Options options = Options())
		: uiRenderer(uiRenderer)
		, textRenderer(textRenderer)
		, options(options)
	{
	}
	
	void reset()
	{
		if (!mouse.primary && !mouse.secondary)
			capturePath.clear();
	}

	void capture(stdx::data_range_param<UniqueElementIdentifier> path, UniqueElementIdentifier id)
	{
		capturePath.assign(path.begin(), path.end());
		capturePath.push_back(id);
	}
	CaptureState::T captureState(stdx::data_range_param<UniqueElementIdentifier> path, UniqueElementIdentifier id) const
	{
		if (capturePath.empty())
			return CaptureState::Available;
		else if (capturePath.size() - 1 == path.size() && capturePath.back() == id && std::equal(path.begin(), path.end(), capturePath.data()))
			return CaptureState::Owned;
		else
			return CaptureState::Unavailable;
	}
	bool capturedOrAcquired(stdx::data_range_param<UniqueElementIdentifier> path, UniqueElementIdentifier id, bool acquire)
	{
		auto state = captureState(path, id);
		if (acquire && state == CaptureState::Available)
		{
			capture(path, id);
			return true;
		}
		else
			return (state == CaptureState::Owned);
	}

	struct Renderer
	{
		TextUi *ui;
	
		std::vector<UniqueElementIdentifier> pathStack;

		glm::ivec2 insertPos;
		glm::ivec2 insertEnd;
		unsigned pendingIndent;

		Renderer(TextUi* ui)
			: ui(ui)
			, insertPos()
			, pendingIndent(0)
		{
		}

		void pushGroup(UniqueElementIdentifier id)
		{
			pathStack.push_back(id);

			pendingIndent += ui->options.indent;
		}
		void popGroup(UniqueElementIdentifier id)
		{
			assert(!pathStack.empty() && id == pathStack.back());
			pathStack.pop_back();

			if (pendingIndent >= ui->options.indent)
				pendingIndent -= ui->options.indent;
			else
				insertPos.x -= ui->options.indent;
		}
		void nextLine()
		{
			insertPos.x += pendingIndent;
			insertPos.y += ui->options.lineHeight;
			pendingIndent = 0;
		}

		void addText(UniqueElementIdentifier id, char const* label, char const* text, bool editable)
		{
			auto labelPos = insertPos;
			labelPos.x -= ui->textRenderer->boundText(label).max.x + ui->options.labelDelta;
			ui->textRenderer->drawText(labelPos, label);

			ui->textRenderer->drawText(insertPos, text);

			nextLine();
		}

		struct Slider
		{
			UniqueElementIdentifier id;
			glm::aabb<glm::ivec2> rect;
			float value;
			float range;
			float valueBase;
		};
		Slider addSlider(UniqueElementIdentifier id, char const* label, float value, float range)
		{
			auto labelPos = insertPos;
			labelPos.x -= ui->textRenderer->boundText(label).max.x + ui->options.labelDelta;
			ui->textRenderer->drawText(labelPos, label);

			char num[32];
			sprintf(num, "%f", value);
			
			auto valBox = ui->textRenderer->boundText(num);
			
			unsigned sliderPadding = 6;
			unsigned sliderBarInset = 3;

			auto sliderPos = insertPos;
			sliderPos.y += valBox.min.y - sliderPadding; 
			auto sliderSize = glm::uvec2(valBox.max - valBox.min) + glm::uvec2(2 * sliderPadding);
			sliderSize.x = std::max((int) sliderSize.x, (int) insertEnd.x - insertPos.x);
			ui->uiRenderer->drawWidget(sliderPos, sliderSize, ui::UiElement::Frame);
			
			auto barPos = sliderPos + glm::ivec2(sliderBarInset);
			auto barSize = sliderSize - glm::uvec2(2 * sliderBarInset);
			auto barEnd = barPos + glm::ivec2(barSize);
			float relativeValue = value / range;
			float relativeValueBase = floor(relativeValue);
			barSize.x = unsigned((relativeValue - relativeValueBase) * (float) barSize.x);
			ui->uiRenderer->drawWidget(barPos, barSize, ui::UiElement::Bar);

			auto valPos = insertPos;
			valPos.x += (sliderSize.x - valBox.max.x) / 2;
			ui->textRenderer->drawText(valPos, num);

			nextLine();

			Slider slider = { id, { barPos, barEnd }, value, range, relativeValueBase * range };
			return slider;
		}

		template <class T>
		struct ValueInteraction
		{
			Renderer* ui;
			T* value;

			ValueInteraction& operator =(Slider const& slider)
			{
				auto& mouse = ui->ui->mouse;

				if (mouse.primary && ui->ui->capturedOrAcquired(ui->pathStack, slider.id, mouse.primaryChanged && glm::in_aabb(mouse.pos, slider.rect)))
						*value = slider.valueBase
							+ float(mouse.pos.x - slider.rect.min.x) / float(slider.rect.max.x - slider.rect.min.x) * slider.range;

				return *this;
			}
		};
		template <class T>
		ValueInteraction<T> interact(T& v) { ValueInteraction<T> i = { this, &v }; return i; }
	};

	Renderer render() { return Renderer(this); }
};

struct TextUiGroup : stdx::noncopyable
{
	UniqueElementIdentifier id;
	TextUi::Renderer* ui;

	TextUiGroup(nullptr_t) : id(nullptr), ui(nullptr) { }
	TextUiGroup(TextUi::Renderer& ui, UniqueElementIdentifier id) : id(id), ui(&ui) { ui.pushGroup(id); }
	TextUiGroup(TextUiGroup&& right) : id(right.id), ui(right.ui) { right.id = nullptr; right.ui = nullptr; }
	~TextUiGroup() { if (ui) ui->popGroup(id); }

	TextUiGroup& operator =(TextUiGroup&& right)
	{
		id = right.id; ui = right.ui;
		right.id = nullptr; right.ui = nullptr;
		return *this;
	}
};

} // namespace
