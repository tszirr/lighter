#pragma once

#include "file"
#include <fstream>
#include <sstream>
#include <string>
#include <map>

namespace stdx
{
	template <class E, class T>
	inline void enable_stream_exceptions(std::basic_ios<E, T> &t)
	{
		t.exceptions(std::ifstream::failbit | std::ifstream::badbit);
	}

	inline std::ifstream read_file(char const* name, std::ios_base::openmode om = std::ios_base::in)
	{
		std::ifstream t(name, om);
		if (t.fail())
			throwx( file_error(name) );

		enable_stream_exceptions(t);
		return t;
	}
	inline std::ifstream read_binary_file(char const* name, std::ios_base::openmode om = std::ios_base::in)
	{
		return read_file(name, om | std::ios_base::binary);
	}

	inline std::ofstream write_file(char const* name, std::ios_base::openmode om = std::ios_base::trunc)
	{
		std::ofstream t(name, om);
		if (t.fail())
			throwx( file_error(name) );

		enable_stream_exceptions(t);
		return t;
	}
	inline std::ofstream write_binary_file(char const* name, std::ios_base::openmode om = std::ios_base::trunc)
	{
		return write_file(name, om | std::ios_base::binary);
	}

	template <class T>
	inline void serialize_binary(std::ostream& stream, T const& val)
	{	stream.write(&reinterpret_cast<char const&>(val), sizeof(val)); }
	template <class T>
	inline void serialize_binary(std::istream& stream, T& val)
	{	stream.read(&reinterpret_cast<char&>(val), sizeof(val)); }

	template <class Range>
	inline void serialize_container_binary(std::ostream& stream, Range const& range)
	{
		auto size = range.size();
		serialize_binary(stream, size);
		if (size > 0)
			stream.write(reinterpret_cast<char const*>(range.data()), sizeof(*range.data()) * size);
	}
	template <class Range>
	inline void serialize_container_binary(std::istream& stream, Range& range)
	{
		size_t size = 0;
		serialize_binary(stream, size);
		range.resize(size);
		if (size > 0)
			stream.read(reinterpret_cast<char*>(range.data()), sizeof(*range.data()) * size);
	}

	/// Character stream buffer class that is required to allow for allocation-free usage of STL streaming facilities.
	template < class Elem, class Traits = std::char_traits<Elem> >
	class basic_charbuf : public std::basic_streambuf<Elem, Traits>
	{
	protected:
#ifdef _MSC_VER
		virtual void __CLR_OR_THIS_CALL _Lock() { }
		virtual void __CLR_OR_THIS_CALL _Unlock() { }
#endif

	public:
		typedef typename Traits::char_type char_type;

		/// Constructs a character stream buffer from the given character range.
		basic_charbuf(char_type *begin, char_type *end)
		{
			setp(begin, end);
			setg(begin, begin, end);
		}

		/// Resets the character stream buffer.
		void reset()
		{
			this->setp(this->pbase(), this->epptr());
			this->setg(this->eback(), this->eback(), this->egptr());
		}

		/// Gets the beginning of the underlying buffer.
		char_type* begin() const { return this->pbase(); }
		/// Gets the end of the underlying buffer.
		char_type* end() const { return this->epptr(); }
		/// Gets the current write position in the underlying buffer.
		char_type* write_end() const { return this->pptr(); }
		/// Gets the current read position in the underlying buffer.
		char_type* read_end() const { return this->gptr(); }
	};

	namespace impl
	{
		/// Helper class that allows for automatic stream buffer construction before stream base class construction.
		template < class Elem, class Traits = std::char_traits<Elem> >
		class charbuf_holder
		{
		protected:
			/// Stream buffer type.
			typedef basic_charbuf<Elem, Traits> stream_buffer;
			/// Stream buffer.
			stream_buffer m_buffer;

			/// Constructs a character stream buffer from the given character range.
			charbuf_holder(typename stream_buffer::char_type *begin, typename stream_buffer::char_type *end)
				: m_buffer(begin, end) { }
		};
	}

	#ifdef _MSC_VER
	// Obscure MS iostream warning
	#pragma warning(push)
	#pragma warning(disable : 4250)
	#endif

	/// Character stream class that allows for allocation-free usage of STL streaming facilities.
	template < class Elem, class Traits = std::char_traits<Elem> >
	class basic_charstream : private impl::charbuf_holder<Elem, Traits>, public std::basic_iostream<Elem, Traits>
	{
	public:
		typedef Traits traits_type;
		typedef typename traits_type::char_type char_type;

	private:
		typedef impl::charbuf_holder<char_type, traits_type> holder_base_type;
		typedef std::basic_iostream<char_type, traits_type> stream_base_type;

	public:
		/// Stream buffer type.
		typedef typename holder_base_type::stream_buffer stream_buffer;

		/// Constructs a character stream from the given character range.
		basic_charstream(basic_charstream const &right)
				: holder_base_type(right.begin(), right.end()),
				stream_base_type(&this->m_buffer) { }
		/// Constructs a character stream from the given character range.
		basic_charstream(char_type *begin, char_type *end)
				: holder_base_type(begin, end),
				stream_base_type(&this->m_buffer) { }
		/// Constructs an unlimited character stream from the given character buffer pointer.
		basic_charstream(char_type *begin)
				: holder_base_type(begin, begin + std::numeric_limits<int>::max()), // required to be int
				stream_base_type(&this->m_buffer) { }

		/// Resets the character stream.
		basic_charstream& reset()
		{
			this->m_buffer.reset();
			return *this;
		}

		/// Returns the address of the stored stream buffer object.
		stream_buffer* rdbuf() const { return static_cast<stream_buffer*>(stream_base_type::rdbuf()); }

		/// Gets the beginning of the underlying buffer.
		char_type* begin() const { return this->m_buffer.begin(); }
		/// Gets the end of the underlying buffer.
		char_type* end() const { return this->m_buffer.end(); }
		/// Gets the current write position in the underlying buffer.
		char_type* write_end() const { return this->m_buffer.write_end(); }
		/// Gets the current read position in the underlying buffer.
		char_type* read_end() const { return this->m_buffer.read_end(); }

	};

	#ifdef _MSC_VER
	#pragma warning(pop)
	#endif

	/// Character stream class.
	typedef basic_charstream<char> charstream;
	/// Wide-character stream class.
	typedef basic_charstream<wchar_t> wcharstream;
	

	struct parse_tag;
	typedef stdx::error<parse_tag> parse_error;

	template <class Char>
	void trim_char_range(Char const*& beg, Char const*& end)
	{
		while (beg < end && *beg == Char(' '))
			++beg;
		while (beg < end && end[-1] == Char(' '))
			--end;
	}
	
	template <class Char>
	stdx::range<size_t> parse_ini_file(stdx::range<Char const*>& file
		, std::vector< key_value_node<Char, size_t> >& nodes
		, std::vector< key_value_node<Char, size_t> >& nodeStack
		, bool inFlatSection = false
		)
	{
		auto nodeStackOffset = nodeStack.size();

		auto nextLine = file.first;

		// allow for strings of unspecified size (last == nullptr):
		// compare using != rather than < and also check for nulltermination
		for (; nextLine != file.last && *nextLine; )
		{
			auto lineBegin = nextLine, lineEnd = lineBegin;
			for (; lineEnd != file.last && *lineEnd; ++lineEnd)
				if (*lineEnd == Char('\n'))
					break;
			
			nextLine = lineEnd;
			if (*lineEnd)
				++nextLine;

			// Process trimmed line
			auto trimBegin = lineBegin, trimEnd = lineEnd;
			trim_char_range(trimBegin, trimEnd);
			if (trimBegin < trimEnd)
			{
				bool newSection = (trimBegin[0] == Char('['));
				bool endSection = (trimEnd[-1] == Char(']'));

				// end of this flat section, handle in parent section
				if (inFlatSection && (newSection || endSection))
				{
					nextLine = lineBegin;
					break;
				}

				// Key trimmed line w/o section delimiters by default
				auto keyBegin = trimBegin, keyEnd = trimEnd;
				if (newSection)
					++keyBegin;
				if (endSection)
					--keyEnd;

				// Value empty by default, always untrimmed
				auto valBegin = lineEnd, valEnd = lineEnd;

				for (auto cursor = keyBegin; cursor < keyEnd; ++cursor)
					if (*cursor == Char('='))
					{
						keyEnd = cursor;
						// Key always trimmed
						trim_char_range(keyBegin, keyEnd);
						// Value starts right after first '='
						valBegin = cursor + 1;
						break;
					}

				key_value_node<Char, size_t> node = {
					  make_range(keyBegin, keyEnd)
					, make_range(valBegin, valEnd)
				};
				if (newSection)
				{
					auto childFileRange = make_range(nextLine, file.last);
					node.children = parse_ini_file<Char>(childFileRange, nodes, nodeStack, endSection);
					nextLine = childFileRange.last;
				}

				nodeStack.push_back(node);

				// End of this deep section
				if (!newSection && endSection)
					break;
			}
		}

		// Update handled range
		file.last = nextLine;

		// Move from stack to continuous storage range
		auto children = make_range_n(nodes.size(), nodeStack.size() - nodeStackOffset);
		nodes.insert(nodes.end(), nodeStack.begin() + nodeStackOffset, nodeStack.end());
		nodeStack.erase(nodeStack.begin() + nodeStackOffset, nodeStack.end());
		return children;
	}
	
	template <class Char>
	std::unique_ptr<key_value_node<Char>[]> parse_ini_file(stdx::range<Char const*> file)
	{
		std::unique_ptr<key_value_node<Char>[]> result;
		
		// Parse to intermediate storage
		std::vector< key_value_node<Char, size_t> > nodes, nodeStack;
		auto parsed = parse_ini_file<Char>(file, nodes, nodeStack);

		// Allocate result tree
		result.reset(new key_value_node<Char>[1 + nodes.size()]);
		auto treeBegin = result.get() + 1, treeEnd = treeBegin + nodes.size();
		
		// Build result tree
		auto treeCursor = treeBegin;
		for (auto node = nodes.data(); treeCursor < treeEnd; ++node, ++treeCursor)
		{
			treeCursor->key = node->key;
			treeCursor->value = node->value;
			treeCursor->children = make_range(treeBegin + node->children.first, treeBegin + node->children.last);
		}

		// Prepend root
		result[0].children = make_range(treeBegin + parsed.first, treeBegin + parsed.last);
		
		return result;
	}
	
} // namespace
