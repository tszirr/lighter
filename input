#pragma once

#include <glfw/glfw3.h>

#include "stdx"
#include "mathx"
#include <vector>
#include <functional>

namespace input
{

struct GLFWKeyboard
{
	static size_t const KeyCount = GLFW_KEY_LAST + 1;
	bool keyState[KeyCount];
	bool keyChanged[KeyCount];

	struct KeyEvent
	{
		std::function<void(bool, bool)> all;
		std::function<void()> pressOnce;
	};
	KeyEvent keyEvent[KeyCount];

	GLFWKeyboard()
	{
		reset();
	}
	template <class Window>
	GLFWKeyboard(Window& wnd)
	{
		reset();
		apply(wnd);
	}

	void reset()
	{
		memset(keyState, 0, sizeof(keyState));
		accept();
	}

	void accept()
	{
		memset(keyChanged, 0, sizeof(keyChanged));
	}

	void keyHandler(int key, bool pressed, bool repeat)
	{
		if (key < 0 || key >= KeyCount) return;

		if (!repeat)
		{
			keyState[key] = pressed;
			keyChanged[key] = true;

			if (pressed)
				if (auto& f = keyEvent[key].pressOnce)
					f();
		}

		if (auto& f = keyEvent[key].all)
			f(pressed, repeat);
	}

	template <class Window>
	void apply(Window& wnd)
	{
		wnd.keyboard = [this](int key, bool pressed, bool repeat){ keyHandler(key, pressed, repeat); };
	}
};

struct GLFWUiKeyboard : GLFWKeyboard
{
	std::vector<unsigned> inputQueue;

	GLFWUiKeyboard()
	{
	}
	template <class Window, class InputKeys>
	GLFWUiKeyboard(Window& wnd, InputKeys)
	{
		apply<typename std::decay<InputKeys>::type>(wnd);
	}

	void textHandler(unsigned chr)
	{
		inputQueue.push_back(chr);
	}

	template <class InputKeys>
	void keyHandler(int key, bool pressed, bool repeat)
	{
		GLFWKeyboard::keyHandler(key, pressed, repeat);

		if (pressed) switch (key)
		{
			unsigned key;
			case GLFW_KEY_BACKSPACE: key = InputKeys::DeleteLast; goto INSERT_INPUT_KEY;
			case GLFW_KEY_DELETE: key = InputKeys::DeleteNext; goto INSERT_INPUT_KEY;
			case GLFW_KEY_LEFT: key = InputKeys::MoveLeft; goto INSERT_INPUT_KEY;
			case GLFW_KEY_RIGHT: key = InputKeys::MoveRight; goto INSERT_INPUT_KEY;
			case GLFW_KEY_UP: key = InputKeys::MoveUp; goto INSERT_INPUT_KEY;
			case GLFW_KEY_DOWN: key = InputKeys::MoveDown; goto INSERT_INPUT_KEY;
			INSERT_INPUT_KEY: inputQueue.push_back(key);
		}
	}

	template <class InputKeys, class Window>
	void apply(Window& wnd)
	{
		wnd.keyboard = [this](int key, bool pressed, bool repeat){ keyHandler<InputKeys>(key, pressed, repeat); };
		wnd.text = [this](unsigned chr){ textHandler(chr); };
	}
};

struct GLFWMouse
{
	static size_t const ButtonCount = 16;
	bool buttonState[ButtonCount];
	bool buttonChanged[ButtonCount];
	
	struct ButtonEvent
	{
		std::function<void(bool)> all;
		std::function<void()> down;
	};
	ButtonEvent buttonEvent[ButtonCount];

	glm::ivec2 lastMousePos;
	glm::ivec2 mouseDelta;

	bool mouseCaptured;

	GLFWMouse()
		: mouseCaptured(false)
	{
		reset();
	}

	template <class Window>
	GLFWMouse(Window& wnd)
		: mouseCaptured(false)
	{
		reset();
		apply(wnd);
	}
	
	void reset()
	{
		memset(buttonState, 0, sizeof(buttonState));
		accept();
	}

	void accept()
	{
		memset(buttonChanged, 0, sizeof(buttonChanged));
		mouseDelta = glm::ivec2();
	}

	void moveHandler(int x, int y)
	{
		glm::ivec2 mousePos(x, y);
		mouseDelta += mousePos - lastMousePos;
		lastMousePos = mousePos;
	}

	static glm::vec2 relativePos(GLFWwindow* wnd, glm::ivec2 pos)
	{
		glm::ivec2 wndRect;
		glfwGetWindowSize(wnd, &wndRect.x, &wndRect.y);
		return glm::vec2(pos) / glm::vec2(wndRect);
	}
	glm::vec2 relativeMousePos(GLFWwindow* wnd) const
	{
		return relativePos(wnd, lastMousePos);
	}
	glm::vec2 relativeMouseDelta(GLFWwindow* wnd) const
	{
		return relativePos(wnd, mouseDelta);
	}

	void buttonHandler(int key, bool pressed)
	{
		if (key < 0 || key >= ButtonCount) return;

		buttonState[key] = pressed;
		buttonChanged[key] = true;

		if (pressed)
			if (auto&f = buttonEvent[key].down)
				f();

		if (auto&f = buttonEvent[key].all)
			f(pressed);
	}

	void setMouseCapture(GLFWwindow* wnd,  bool capture)
	{
		if (capture)
			glfwSetInputMode(wnd, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
		else
			glfwSetInputMode(wnd, GLFW_CURSOR, GLFW_CURSOR_NORMAL);
		
		double x, y;
		glfwGetCursorPos(wnd, &x, &y);
		lastMousePos = glm::ivec2((int) x, (int) y);
		
		mouseCaptured = capture;
	}

	template <class Window>
	void apply(Window& wnd)
	{
		wnd.buttons = [this](int key, bool pressed){ buttonHandler(key, pressed); };
		wnd.mouse = [this](int x, int y){ moveHandler(x, y); };
	}
};

typedef GLFWKeyboard Keyboard;
typedef GLFWUiKeyboard UiKeyboard;
typedef GLFWMouse Mouse;

} // namespace
