#pragma once

#include "ogl"

#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_BITMAP_H

#include "stdx"
#include "mathx"

#include <algorithm>
#include <string>
#include <vector>

#include <unordered_map>

namespace text
{

struct freetype_tag;
typedef stdx::error<freetype_tag> ft_error;

#define THROW_FREETYPE_ERROR(error, ctx) do { auto _uniqueerrorval = error; if (_uniqueerrorval != 0) throwx( ::text::ft_error(ctx) ); } while (false)

template <class Pointer, FT_Error (*Deleter)(Pointer)>
struct ft_delete
{
	typedef Pointer pointer;
	void operator ()(pointer ptr) const
	{
		if (ptr)
			(*Deleter)(ptr);
	}

	typedef std::unique_ptr< typename std::remove_pointer<Pointer>::type, ft_delete<Pointer, Deleter> > pointer_type;
	typedef stdx::unique_handle< typename std::remove_pointer<Pointer>::type, ft_delete<Pointer, Deleter> > handle_type;
};

struct FreeType : ft_delete<FT_Library, FT_Done_FreeType>::handle_type
{
	MOVE_BASE(FreeType, unique_handle)

	FreeType()
	{
		THROW_FREETYPE_ERROR(FT_Init_FreeType(rebind()), "FT_Init_FreeType");
	}
};

struct Bitmap : stdx::noncopyable, FT_Bitmap
{
	MOVE_GENERATE(Bitmap, MOVE_2, BASE, FT_Bitmap, MEMBER, lib)
	FT_Library lib;

	Bitmap(nullptr_t) { }
	Bitmap(FT_Library lib)
		: lib(lib)
	{
		FT_Bitmap_New(this);
	}
	~Bitmap()
	{
		FT_Bitmap_Done(lib, this);
	}
};

struct PtSize
{
	FT_UInt width, height;
	FT_UInt dpiH, dpiV;

	explicit PtSize(FT_UInt height, FT_UInt width = 0, FT_UInt dpiH = 96, FT_UInt dpiV = 0)
		: width(width), height(height), dpiH(dpiH), dpiV(dpiV) { }
};
struct PxSize
{
	FT_UInt width, height;

	explicit PxSize(FT_UInt height, FT_UInt width = 0)
		: width(width), height(height) { }
};

struct Face : ft_delete<FT_Face, FT_Done_Face>::handle_type
{
	MOVE_BASE(Face, unique_handle)

	Face(nullptr_t) { }
	Face(FT_Library library, char const* name, FT_Long faceIdx = 0)
	{
		THROW_FREETYPE_ERROR(FT_New_Face(library, name, faceIdx, rebind()), "FT_New_Face");
	}
	Face(FT_Library library, char const* name, PtSize size, FT_Long faceIdx = 0)
	{
		*this = Face(library, name, faceIdx);
		this->size(size);
	}
	Face(FT_Library library, char const* name, PxSize size, FT_Long faceIdx = 0)
	{
		*this = Face(library, name, faceIdx);
		this->size(size);
	}

	void size(PxSize size)
	{
		THROW_FREETYPE_ERROR(FT_Set_Pixel_Sizes(*this, size.width, size.height), "FT_Set_Pixel_Sizes");
	}

	void size(PtSize size)
	{
		THROW_FREETYPE_ERROR(FT_Set_Char_Size(*this, size.width * 64, size.height * 64, size.dpiH, size.dpiV), "FT_Set_Char_Size");
	}

	FT_UInt glyph_idx(FT_ULong character) const
	{
		return FT_Get_Char_Index(*this, character);
	}

	FT_Vector kerning_delte(FT_UInt prevGlyph, FT_UInt nextGlyph) const
	{
		FT_Vector delta;
		FT_Get_Kerning(*this, prevGlyph, nextGlyph, FT_KERNING_DEFAULT, &delta);
		return delta;
	}

	FT_GlyphSlot& render_glyph(FT_UInt glyphIdx, FT_Render_Mode renderMode = FT_RENDER_MODE_NORMAL)
	{
		auto loadFlags = FT_LOAD_COLOR | (renderMode == FT_RENDER_MODE_LCD ? FT_LOAD_TARGET_LCD : 0);
		THROW_FREETYPE_ERROR(FT_Load_Glyph(*this, glyphIdx, loadFlags), "FT_Load_Glyph");
		auto& glyth = get()->glyph;
		if (glyth->format != FT_GLYPH_FORMAT_BITMAP)
			THROW_FREETYPE_ERROR(FT_Render_Glyph(glyth, renderMode), "FT_Render_Glyph");
		return glyth;
	}
};

struct BitmapCache
{
	MOVE_GENERATE(BitmapCache, MOVE_4, MEMBER, size, MEMBER, rowHeight, MEMBER, numRows, MEMBER, pixelsInRow)

	glm::uvec2 size;
	unsigned rowHeight, numRows;
	std::unique_ptr<unsigned[]> pixelsInRow;

	BitmapCache(glm::uvec2 size, unsigned rowHeight, bool adaptRowHeight = true)
		: size(size)
		, rowHeight( (adaptRowHeight) ? size.y / (size.y / rowHeight) : rowHeight )
		, numRows(size.y / rowHeight)
		, pixelsInRow(new unsigned[numRows])
	{
		clear();
	}

	glm::uvec2 add(glm::uvec2 tileSize)
	{
		glm::uvec2 tileOffset(~0);

		auto numTileRows = (tileSize.y + rowHeight - 1) / rowHeight;
		if (numTileRows <= numRows)
		{
			auto pixelsInRow = this->pixelsInRow.get();
			auto numEligibleRows = numRows - numTileRows + 1;

			unsigned optRowIdx = 0;
			unsigned optRowOffset = ~0;

			for (unsigned r = 0; r < numEligibleRows; ++r)
			{
				unsigned rowOffset = 0;
				for (unsigned rp = r; rp < r + numTileRows; ++rp)
					rowOffset = std::max(rowOffset, pixelsInRow[rp]);

				if (rowOffset < optRowOffset)
				{
					optRowOffset = rowOffset;
					optRowIdx = r;
				}
			}

			if (tileSize.x <= size.x - optRowOffset)
			{
				auto newOptRowOffset = optRowOffset + tileSize.x;
				for (unsigned rp = optRowIdx; rp < optRowIdx + numTileRows; ++rp)
					pixelsInRow[rp] = newOptRowOffset;
				tileOffset.x = optRowOffset;
				tileOffset.y = optRowIdx * rowHeight;
			}
		}

		return tileOffset;
	}

	void clear()
	{
		for (unsigned r = 0; r < numRows; ++r)
			pixelsInRow[r] = 0;
	}
};

struct TextureBitmapCache
{
	MOVE_GENERATE(TextureBitmapCache, MOVE_4, MEMBER, cache, MEMBER, pixels, MEMBER, texture, MEMBER, pixelsChanged)

	BitmapCache cache;
	std::unique_ptr<unsigned char[]> pixels;
	ogl::Texture texture;
	bool pixelsChanged;

	TextureBitmapCache(glm::uvec2 size, unsigned rowHeight)
		: cache(size, rowHeight)
		, pixels(new unsigned char[size.x * size.y * 4])
		, texture(ogl::Texture::create2D(GL_TEXTURE_2D, GL_RGBA8, size.x, size.y))
		, pixelsChanged(false)
	{
	}

	enum BitmapFormat
	{
		Intensity,
		SubPixel,
		BGRA
	};

	glm::uvec2 add(glm::uvec2 tileSize, unsigned char const* srcBytes, unsigned srcPitch, BitmapFormat srcFormat)
	{
		glm::uvec2 tileOffset = cache.add(tileSize);

		if (tileOffset.x != ~0)
		{
			auto destPitch = 4 * cache.size.x;
			auto destLine = 4 * tileSize.x;
			auto destPtr = pixels.get() + 4 * tileOffset.x + tileOffset.y * destPitch;

			for (auto y = 0U; y < tileSize.y; ++y)
			{
				auto destRow = destPtr + y * destPitch;
				auto srcRow = srcBytes + y * srcPitch;

				if (srcFormat == BGRA)
					memcpy(destRow, srcRow, destLine);
				else if (srcFormat == SubPixel)
				{
					for (auto x = 0U; x < tileSize.x; ++x)
					{
						destRow[2] = *srcRow++;
						destRow[1] = *srcRow++;
						destRow[0] = *srcRow++;
						destRow[3] = 0xff;
						destRow += 4;
					}
				}
				else
				{
					for (auto x = 0U; x < tileSize.x; ++x)
					{
						destRow[0] = destRow[1] = destRow[2] = destRow[3] = *srcRow++;
						destRow += 4;
					}
				}
			}

			pixelsChanged = true;
		}

		return tileOffset;
	}

	void flushToTexture()
	{
		if (pixelsChanged)
		{
			texture.write(GL_TEXTURE_2D, 0, pixels.get(), GL_UNSIGNED_BYTE, GL_BGRA, cache.size.x, cache.size.y); 
			pixelsChanged = false;
		}
	}

	void clear()
	{
		cache.clear();
	}
};

struct GlyphCache
{
	struct CachedGlyph
	{
		FT_UInt glyphIdx;
		glm::uvec2 cacheOffset;
		glm::uvec2 cacheSize;
		glm::ivec2 offset;
		glm::ivec2 advance;
//		bool subPixels; not needed right now
	};

	Bitmap auxBmp;
	TextureBitmapCache bmpCache;

	typedef std::unordered_map<FT_ULong, CachedGlyph> char_map;
	char_map cache;

	GlyphCache(FT_Library lib, TextureBitmapCache bmpCache)
		: auxBmp(lib)
		, bmpCache(std::move(bmpCache)) { }

	CachedGlyph const& get(FT_Library lib, Face& face, FT_ULong chr, bool &overflow, FT_Render_Mode renderMode)
	{
		overflow = false;
		auto it = cache.find(chr);
		return (it != cache.end())
			? it->second
			: add(lib, face, chr, overflow, renderMode);
	}

	// todo: multiple cache bitmaps OR array?
	// todo: discard on overflow

	CachedGlyph const& add(FT_Library lib, Face& face, FT_ULong chr, bool &overflow, FT_Render_Mode renderMode)
	{
		overflow = false;

		auto glyphIdx = face.glyph_idx(chr);
		auto& glyph = face.render_glyph(glyphIdx, renderMode);
		bool subPixels = (glyph->bitmap.pixel_mode == FT_PIXEL_MODE_LCD);
		
		// Retrieve glyph bitmap in 8 or 32 bpp
		auto glyphBmp = &glyph->bitmap;
		if (!subPixels && glyph->bitmap.pixel_mode != FT_PIXEL_MODE_BGRA && glyph->bitmap.pixel_mode != FT_PIXEL_MODE_GRAY)
		{
			glyphBmp = &auxBmp;
			FT_Bitmap_Convert(lib, &glyph->bitmap, glyphBmp, 1);
		}
		TextureBitmapCache::BitmapFormat glyphFmt = (subPixels) ? TextureBitmapCache::SubPixel : TextureBitmapCache::Intensity;
		if (glyph->bitmap.pixel_mode == FT_PIXEL_MODE_BGRA) glyphFmt = TextureBitmapCache::BGRA;

		// Copy glyph to bitmap cache
		glm::uvec2 glyphSize((subPixels) ? glyphBmp->width / 3 : glyphBmp->width, glyphBmp->rows);
		glm::uvec2 glyphOffset;
		while (true) {
			glyphOffset = bmpCache.add(glyphSize, glyphBmp->buffer, glyphBmp->pitch, glyphFmt);
			if (glyphOffset.x != ~0) break;
			// Flush & clear on overflow
			overflow = true;
			bmpCache.flushToTexture();
			clear();
		}

		// Store cached glyph
		CachedGlyph cached = { glyphIdx, glyphOffset, glyphSize
			, glm::ivec2(glyph->bitmap_left, glyph->bitmap_top)
			, glm::ivec2(glyph->advance.x + 63, glyph->advance.y + 63) >> 6 };
//			, subPixels };
		return (cache[chr] = cached);
	}

	void clear()
	{
		cache.clear();
		bmpCache.clear();
	}
};

struct TextRenderer
{
	struct QueuedChar
	{
		unsigned xy;
		unsigned atlasXY;
		unsigned wh;

		template <class T>
		static unsigned build_tuple(T x, T y)
		{
			return (unsigned) stdx::to_unsigned(x)
				| ((unsigned) stdx::to_unsigned(y) << unsigned(8 * sizeof(T)));
		}
	};

	ogl::Program* charProgram;
	ogl::VertexArrays charArrays;
	unsigned charBatchCnt, charBatchSize;
	std::unique_ptr<QueuedChar[]> charMem;
	ogl::Buffer charBuffer;
	GlyphCache glyphCache;
	FT_Render_Mode renderMode;

	TextRenderer(FT_Library lib, ogl::Program* program, unsigned charBatchSize, unsigned charHeight = 16, unsigned cacheRes = 1024)
		: charProgram(move(program))
		, charArrays()
		, charBatchCnt(0)
		, charBatchSize(charBatchSize)
		, charMem(new QueuedChar[charBatchSize])
		, charBuffer(ogl::Buffer::create(GL_ARRAY_BUFFER, charBatchSize * sizeof(QueuedChar), nullptr, GL_STATIC_DRAW))
		, glyphCache(lib, TextureBitmapCache(glm::uvec2(cacheRes), charHeight))
		, renderMode(FT_RENDER_MODE_LCD)
	{
		charArrays.bind();
		charBuffer.bind(GL_ARRAY_BUFFER);
		glVertexAttribIPointer(0, 3, GL_UNSIGNED_INT, 0, nullptr);
		glEnableVertexAttribArray(0);
		charBuffer.unbind(GL_ARRAY_BUFFER);
		charArrays.unbind();
	}
	
	template <class Char, class CharOp, class GlyphOp>
	glm::aabb<glm::ivec2> layoutText(FT_Library lib, Face& face, glm::ivec2 textPos
		, CharOp&& charToGlyphOp, GlyphOp&& glyphOp
		, Char const* chars, size_t maxChars = ~0)
	{
		glm::aabb<glm::ivec2> box = { textPos, textPos };

		glm::ivec2 charPos = textPos;
		size_t charCount = 0;

		for (auto chr = chars; *chr && charCount < maxChars; ++chr, ++charCount)
		{
			if (*chr == '\n')
			{
				charPos.y += face->size->metrics.height >> 6;
				charPos.x = textPos.x;
				continue;
			}

			auto uchr = stdx::to_unsigned(*chr);
			auto const& glyph = charToGlyphOp(lib, face, charPos, uchr);
			
			auto glyphTopLeft = charPos + glm::ivec2(glyph.offset.x, -glyph.offset.y);
			auto glyphBottomRight = glyphTopLeft + glm::ivec2(glyph.cacheSize);
			
			glm::aabb<glm::ivec2> glyphBox = { glyphTopLeft, glyphBottomRight };
			glyphOp(lib, face, charPos, uchr, glyphBox, glyph, charCount);

			box.min = min(box.min, glyphTopLeft);
			box.max = max(box.max, glyphBottomRight);

			charPos += glyph.advance;
			// todo: kerning
		}

		return box;
	}

	template <class Char>
	glm::aabb<glm::ivec2> boundText(FT_Library lib, Face& face, glm::ivec2 textPos, Char const* chars, size_t maxChars = ~0)
	{
		using namespace std::placeholders;
		return layoutText(lib, face, textPos, std::bind(&TextRenderer::getGlyph, this, _1, _2, _3, _4), stdx::noop(), chars, maxChars);
	}

	template <class Char>
	glm::aabb<glm::ivec2> drawText(FT_Library lib, Face& face, glm::ivec2 textPos, Char const* chars, size_t maxChars = ~0, bool draw = true)
	{
		using namespace std::placeholders;
		return layoutText(lib, face, textPos, std::bind(&TextRenderer::drawChar, this, _1, _2, _3, _4), stdx::noop(), chars, maxChars);
	}
	
	template <class Char>
	glm::aabb<glm::ivec2> selectChar(FT_Library lib, Face& face
		, glm::ivec2 cursorPos, size_t& charIdx
		, glm::ivec2 textPos, Char const* chars, size_t maxChars = ~0)
	{
		glm::aabb<glm::ivec2> charBox = { textPos, textPos };
		size_t chrIdx = ~0;
		size_t textLen = 0;

		auto charSelect = [&](FT_Library lib, Face& face, glm::ivec2 pos, FT_ULong chr
			, glm::aabb<glm::ivec2> const& glyphBox, GlyphCache::CachedGlyph const& glyph
			, size_t textOffset)
		{
			if (in_aabb(cursorPos, glyphBox))
			{
				chrIdx = textOffset;
				charBox = glyphBox;
			}
			textLen = textOffset + 1;
		};
		using namespace std::placeholders;
		auto textBox = layoutText(lib, face, textPos, std::bind(&TextRenderer::getGlyph, this, _1, _2, _3, _4), charSelect, chars, maxChars);

		if (chrIdx == ~0 && textBox.min.y <= cursorPos.y && cursorPos.y <= textBox.max.y)
		{
			if (cursorPos.x < textBox.max.x)
				chrIdx = 0;
			else
				chrIdx = textLen;
		}

		charIdx = chrIdx;
		return charBox;
	}

	glm::aabb<glm::ivec2> boundChar(FT_Library lib, Face& face, glm::ivec2 charPos, FT_ULong chr)
	{
		glm::aabb<glm::ivec2> box;
		auto const& glyph = getGlyph(lib, face, charPos, chr);
		box.min = charPos + glm::ivec2(glyph.offset.x, -glyph.offset.y);
		box.max = box.min + glm::ivec2(glyph.cacheSize);
		return box;
	}

	GlyphCache::CachedGlyph const& getGlyph(FT_Library lib, Face& face, glm::ivec2 pos, FT_ULong chr)
	{
		bool cacheOverflow;
		auto& glyph = glyphCache.get(lib, face, chr, cacheOverflow, renderMode);
		
		if (cacheOverflow)
			flushText(cacheOverflow);

		return glyph;
	}

	GlyphCache::CachedGlyph const& drawChar(FT_Library lib, Face& face, glm::ivec2 pos, FT_ULong chr)
	{
		bool cacheOverflow;
		auto& glyph = glyphCache.get(lib, face, chr, cacheOverflow, renderMode);
		
		if (cacheOverflow || charBatchCnt >= charBatchSize)
			flushText(cacheOverflow);

		QueuedChar qc = { QueuedChar::build_tuple( (short) (pos.x + glyph.offset.x), (short) (pos.y - glyph.offset.y) )
			, QueuedChar::build_tuple( (unsigned short) glyph.cacheOffset.x, (unsigned short) glyph.cacheOffset.y )
			, QueuedChar::build_tuple( (unsigned short) glyph.cacheSize.x, (unsigned short) glyph.cacheSize.y ) };
		charMem[charBatchCnt] = qc;
		++charBatchCnt;

		return glyph;
	}

	void flushText(bool renderOldGlyphCache = false)
	{
		if (charBatchCnt > 0)
		{
			charBuffer.write(GL_ARRAY_BUFFER, stdx::make_range_n(charMem.get(), charBatchCnt));
			if (!renderOldGlyphCache)
				glyphCache.bmpCache.flushToTexture();

			glyphCache.bmpCache.texture.bind(GL_TEXTURE_2D, 0);
			charArrays.bind();
			charProgram->bind();
			glDrawArrays(GL_POINTS, 0, charBatchCnt);
			
			charBatchCnt = 0;
		}
	}

	void setRenderMode(FT_Render_Mode renderMode)
	{
		flushText();

		this->renderMode = renderMode;
		this->glyphCache.clear();
	}
};

} // namespace
