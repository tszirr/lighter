#pragma once

#include <cuda.h>

#include "stdx"

namespace cuda
{

struct cuda_tag;
typedef stdx::error<cuda_tag> cuda_error;

#define THROW_CUDA_ERROR(error, ctx) do { auto _uniqueerrorval = error; if (_uniqueerrorval != CUDA_SUCCESS) throwx( ::cuda::cuda_error(ctx) ); } while (false)

template <class RefClass, class Pointer, CUresult (CUDAAPI* Deleter)(Pointer)>
struct cuda_destroy : stdx::ref_base<Pointer>
{
	typedef Pointer pointer;
	typedef stdx::own<RefClass> owned;
	void destroy() const
	{
		if (this->ref)
			(*Deleter)(this->ref);
	}
	void forget()
	{
		this->ref = 0;
	}
	bool valid() const
	{
		return (this->ref != 0);
	}
};

} // namespace
