#pragma once

#include <cuda.h>

#include "stdx"

namespace cuda
{

struct cuda_tag;
typedef stdx::error<cuda_tag> cuda_error;

#define THROW_CUDA_ERROR(error, ctx) do { auto _uniqueerrorval = error; if (_uniqueerrorval != CUDA_SUCCESS) throwx( ::cuda::cuda_error(ctx) ); } while (false)

template <class Pointer, CUresult (CUDAAPI* Deleter)(Pointer)>
struct cuda_delete
{
	typedef Pointer pointer;
	void operator ()(pointer ptr) const
	{
		if (ptr)
			(*Deleter)(ptr);
	}

	typedef std::unique_ptr< Pointer, cuda_delete<Pointer, Deleter> > pointer_type;
	typedef stdx::unique_handle< Pointer, cuda_delete<Pointer, Deleter> > handle_type;
};

template <class Pointer>
struct cuda_no_delete
{
	typedef Pointer pointer;
	void operator ()(pointer ptr) const { }

	typedef std::unique_ptr< Pointer, cuda_no_delete<Pointer> > pointer_type;
	typedef stdx::unique_handle< Pointer, cuda_no_delete<Pointer> > handle_type;
};

} // namespace
