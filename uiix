#pragma once

#include "uii"
#include "file"
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

namespace ui
{

struct IniStream : ui::KeyValueStream
{
	std::ostream* out;
	std::string indent;

	IniStream(std::ostream& out)
		: out(&out)
	{ }

	void enterSection(char const* key, char const* value) override
	{
		*out << indent << '[' << key;
		if (value)
			*out << '=' << value;
		*out << std::endl;
		indent.push_back(' ');
	}
	void leaveSection(char const* key) override
	{
		indent.pop_back();
		*out << indent << "]\n";
	}
	void addItem(char const* key, char const* value) override
	{
		*out << indent << key << '=' << value << std::endl;
	}
};

template <class KeyValueNode>
struct SortedKeyValueStore : ui::KeyValueStore
{
	std::vector<KeyValueNode const*> sectionNodes;

	SortedKeyValueStore(KeyValueNode const* in)
		: sectionNodes(1, in)
	{ }

	static KeyValueNode const* fromItem(Item const* it) { return reinterpret_cast<KeyValueNode const*>(it); }
	static Item const* toItem(KeyValueNode const* it) { return reinterpret_cast<Item const*>(it); }

	static bool key_greater(stdx::range<char const*> thanKey, KeyValueNode const& b) { return memcmp(b.key, thanKey) > 0; }

	Item const* findItem(char const* key = nullptr) override
	{
		if (auto parent = sectionNodes.back())
		{
			if (key)
				return toItem(parent->find_sorted(stdx::str_range(key)));
			else if (auto all = parent->children)
				return toItem(all.first);
		}
		return nullptr;
	}
	stdx::range<KeyValueNode const*> assertParentRange(KeyValueNode const* it) const
	{
		auto parent = sectionNodes.back();
		assert (parent);
		auto parentRange = parent->children;
		assert (parentRange.first <= it && it < parentRange.last);
		return parentRange;
	}
	Item const* nextItem(Item const* prev) override
	{
		if (prev)
		{
			auto it = fromItem(prev), next = it;
			if (++next < assertParentRange(it).last && next->key == it->key)
				return toItem(next);
		}
		return nullptr;
	}
	size_t estimateCount(Item const* startingWith) const override
	{
		if (auto begin = fromItem(startingWith))
		{
			auto end = std::upper_bound(begin, assertParentRange(begin).last, begin->key, key_greater);
			return end - begin;
		}
		return 0;
	}

	void enterSection(Item const* item) override
	{
		auto section = fromItem(item);
		if (section) assertParentRange(section);
		sectionNodes.push_back(section);
	}
	void leaveSection() override
	{
		sectionNodes.pop_back();
	}
	stdx::range<char const*> getValue(Item const* item) override
	{
		return (item) ? fromItem(item)->value : stdx::range<char const*>();
	}
};

template <class KeyValueNode>
SortedKeyValueStore<KeyValueNode> make_SortedKeyValueStore(KeyValueNode* kvn)
{	return SortedKeyValueStore<KeyValueNode>(kvn); }

} // namespace
