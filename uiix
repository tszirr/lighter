#pragma once

#include "uii"
#include "file"
#include <vector>
#include <iostream>
#include <algorithm>

namespace ui
{

struct IniStream : ui::KeyValueStream
{
	std::ostream* out;

	IniStream(std::ostream& out)
		: out(&out)
	{ }

	void enterSection(char const* section, char const* sectionPath) override
	{
		*out << '[' << sectionPath << ']' << std::endl;
	}
	void leaveSection() override { }
	void addItem(char const* key, char const* value) override
	{
		*out << key << '=' << value << std::endl;
	}
};

template <class KeyValueNode>
struct SortedKeyValueStore : ui::KeyValueStore
{
	std::vector<KeyValueNode const*> sectionNodes;

	SortedKeyValueStore(KeyValueNode const* in)
		: sectionNodes(1, in)
	{ }

	void enterSection(char const* section) override
	{
		auto parent = sectionNodes.back();
		sectionNodes.push_back(
			(parent) ? parent->find_sorted(stdx::str_range(section)) : nullptr
		);
	}
	void leaveSection() override
	{
		sectionNodes.pop_back();
	}
	stdx::range<char const*> getValue(char const* key) override
	{
		if (auto parent = sectionNodes.back())
			if (auto it = parent->find_sorted(stdx::str_range(key)))
				return it->value;
		return stdx::range<char const*>();
	}
};

template <class KeyValueNode>
SortedKeyValueStore<KeyValueNode> make_SortedKeyValueStore(KeyValueNode* kvn)
{	return SortedKeyValueStore<KeyValueNode>(kvn); }

} // namespace
