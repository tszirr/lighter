#pragma once

#include "stdx"
#include "mathx"

#include <vector>

namespace scene
{

struct scene_io_tag;
typedef stdx::error<scene_io_tag> io_error;

template <class T>
struct VectorStorage { typedef std::vector<T> type; };
template <class T>
struct ExternalStorage { typedef stdx::range<T> type; };

template <template <class T> class Storage>
struct SceneVerticesT
{
	MOVE_GENERATE(SceneVerticesT, MOVE_6
		, MEMBER, positions
		, MEMBER, normals
		, MEMBER, tangents
		, MEMBER, bitangents
		, MEMBER, texcoords
		, MEMBER, colors
		)

	SceneVerticesT() { }

	typename Storage< math::vec<float, 3> >::type positions;

	typename Storage< math::vec<float, 3> >::type normals;
	typename Storage< math::vec<float, 3> >::type tangents;
	typename Storage< math::vec<float, 3> >::type bitangents;

	typename Storage< math::vec<float, 2> >::type texcoords;

	typename Storage< unsigned >::type colors;

	template <class Scene, class Visitor>
	static void reflect(Scene&& s, Visitor&& v)
	{
		v(s.positions, "pos");
		v(s.normals, "nrm");
		v(s.tangents, "tan");
		v(s.bitangents, "bitn");
		v(s.texcoords, "texc");
		v(s.colors, "col");
	}
};

template <template <class T> class Storage>
struct SceneGeometryT : SceneVerticesT<Storage>
{
	MOVE_GENERATE(SceneGeometryT, MOVE_2
		, BASE, SceneVerticesT
		, MEMBER, indices
		)

	SceneGeometryT() { }

	typename Storage< unsigned >::type indices;

	template <class Scene, class Visitor>
	static void reflect(Scene&& s, Visitor&& v)
	{
		SceneVerticesT::reflect(s, v);
		v(s.indices, "ind");
	}
};

struct Mesh
{
	static unsigned const version = 1;

	stdx::range<unsigned> primitives;
	unsigned material;

	math::aabb< math::vec<float, 3> > bounds;
};

struct Instance
{
	static unsigned const version = 1;

	unsigned mesh;
	math::mat4x3 transform;

	math::aabb< math::vec<float, 3> > bounds;
};

template <class Source>
struct MaterialProperties
{
	Source diffuse;

	Source emissive;
	
	Source specular;
	Source shininess;
	Source reflectivity;

	Source filter;
	Source refract;

	template <class M, class Visitor>
	static void reflect(M& s, Visitor&& v)
	{
		v(s.diffuse, "diff");
		v(s.emissive, "emit");
		v(s.specular, "spec");
		v(s.shininess, "shin");
		v(s.reflectivity, "refl");
		v(s.filter, "filt");
		v(s.refract, "refr");
	}
	void reset_float_default()
	{
		memset(this, 0, sizeof(*this));
		typedef float float_array[sizeof(Source) / sizeof(float)];
		for (auto& v : reinterpret_cast<float_array&>(diffuse)) v = 1.0f;
		for (auto& v : reinterpret_cast<float_array&>(specular)) v = 1.0f;
		for (auto& v : reinterpret_cast<float_array&>(reflectivity)) v = 1.0f;
		for (auto& v : reinterpret_cast<float_array&>(refract)) v = 1.0f;
	}
	static MaterialProperties float_default()
	{
		MaterialProperties r;
		r.reset_float_default();
		return r;
	}
};

template <class Texture>
struct MaterialTextures : MaterialProperties<Texture>
{
	Texture bump;
	float bumpScale;

	Texture normal;

	template <class M, class Visitor>
	static void reflect_tex(M& s, Visitor&& v)
	{
		typename MaterialProperties::reflect(s, v);
		v(s.bump, "bmp");
		v(s.normal, "nrm");
	}
	template <class M, class Visitor>
	static void reflect(M& s, Visitor&& v)
	{
		reflect_tex(s, v);
		v(s.bumpScale, "bmps");
	}

	void reset_null_default()
	{
		memset(this, 0, sizeof(*this));
		bumpScale = 1.0f;
	}
	static MaterialTextures null_default()
	{
		MaterialTextures r;
		r.reset_null_default();
		return r;
	}
};

struct Material : MaterialProperties< math::vec<float, 3> >
{
	static unsigned const version = 1;

	MaterialTextures<unsigned> tex;

	void reset_default()
	{
		reset_float_default();
		tex.reset_null_default();
	}
	static Material make_default()
	{
		Material r;
		r.reset_default();
		return r;
	}
	template <class M, class Visitor>
	static void reflect(M& s, Visitor&& v)
	{
		typename MaterialProperties::reflect(s, v);
		s.tex.reflect(s.tex, v);
	}
};

struct Texture
{
	static unsigned const version = 1;

	unsigned pathBegin;
	unsigned attributes;
};

template <template <class T> class Storage = VectorStorage>
struct SceneT : SceneGeometryT<Storage>
{
	MOVE_GENERATE(SceneT, MOVE_5
		, BASE, SceneGeometryT
		, MEMBER, meshes
		, MEMBER, materials
		, MEMBER, textures
		, MEMBER, instances
		)

	SceneT() { }

	typename Storage<Mesh>::type meshes;

	typename Storage<Material>::type materials;
	typename Storage<Texture>::type textures;
	typename Storage<char>::type texturePaths;

	typename Storage<Instance>::type instances;

	template <class Scene, class Visitor>
	static void reflect(Scene& s, Visitor&& v)
	{
		typename SceneGeometryT::reflect(s, v);
		v(s.meshes, "mesh");
		v(s.materials, "mat");
		v(s.textures, "texp");
		v(s.texturePaths, "tex");
		v(s.instances, "inst");
	}

	char const* getTexturePath(unsigned i) const { return (i) ? &texturePaths[i] : nullptr; }
};

typedef SceneT<> Scene;

struct DataHeader
{
	unsigned id;
	unsigned size;
	unsigned version;
	unsigned elementSize;

	static unsigned make_id(char const* id);
	static DataHeader make(char const* id, size_t count, unsigned version, size_t elementSize);
	template <class T>
	static unsigned make_version(T, std::integral_constant<unsigned, T::version>* = nullptr) { return T::version; }
	CPP11_IF_VARIADIC_TEMPLATES(template <class... Args>)
	static unsigned make_version(CPP11_IF_VARIADIC_TEMPLATES(Args&&)...) { return 0; }
};

} // namespace
