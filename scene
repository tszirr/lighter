#pragma once

#include "stdx"
#include "mathx"

#include <vector>

namespace scene
{

template <class T>
struct VectorStorage { typedef std::vector<T> type; };
template <class T>
struct ExternalStorage { typedef stdx::range<T> type; };

template <template <class T> class Storage>
struct SceneVerticesT
{
	MOVE_GENERATE(SceneVerticesT, MOVE_6
		, MEMBER, positions
		, MEMBER, normals
		, MEMBER, tangents
		, MEMBER, bitangents
		, MEMBER, texcoords
		, MEMBER, colors
		)

	SceneVerticesT() { }

	typename Storage< math::vec<float, 3> >::type positions;

	typename Storage< math::vec<float, 3> >::type normals;
	typename Storage< math::vec<float, 3> >::type tangents;
	typename Storage< math::vec<float, 3> >::type bitangents;

	typename Storage< math::vec<float, 2> >::type texcoords;

	typename Storage< unsigned >::type colors;

	template <class Visitor>
	void reflect(Visitor&& v) const
	{
		v(positions, "pos");
		v(normals, "nrm");
		v(tangents, "tan");
		v(bitangents, "bitn");
		v(texcoords, "texc");
		v(colors, "col");
	}
};

template <template <class T> class Storage>
struct SceneGeometryT : SceneVerticesT<Storage>
{
	MOVE_GENERATE(SceneGeometryT, MOVE_2
		, BASE, SceneVerticesT
		, MEMBER, indices
		)

	SceneGeometryT() { }

	typename Storage< unsigned >::type indices;

	template <class Visitor>
	void reflect(Visitor&& v) const
	{
		this->SceneVerticesT::reflect(v);
		v(indices, "ind");
	}
};

struct Mesh
{
	static unsigned const version = 1;

	stdx::range<unsigned> primitives;
	unsigned material;

	math::aabb< math::vec<float, 3> > bounds;
};

struct Instance
{
	static unsigned const version = 1;

	unsigned mesh;
	math::vec< math::vec<float, 3>, 4 > transform;

	math::aabb< math::vec<float, 3> > bounds;
};

template <class Source>
struct MaterialProperties
{
	Source diffuse;

	Source emissive;
	
	Source specular;
	Source shininess;
	Source reflectivity;

	Source filter;
	Source refract;
};

template <class Texture>
struct MaterialTextures : MaterialProperties<Texture>
{
	Texture bump;
	float bumpScale;

	Texture normal;
};

struct Material : MaterialProperties< math::vec<float, 3> >
{
	static unsigned const version = 1;

	MaterialTextures<unsigned> tex;
};

template <template <class T> class Storage = VectorStorage>
struct SceneT : SceneGeometryT<Storage>
{
	MOVE_GENERATE(SceneT, MOVE_5
		, BASE, SceneGeometry
		, MEMBER, meshes
		, MEMBER, materials
		, MEMBER, textures
		, MEMBER, instances
		)

	SceneT() { }

	typename Storage<Mesh>::type meshes;

	typename Storage<Material>::type materials;
	typename Storage<char>::type textures;

	typename Storage<Instance>::type instances;

	template <class Visitor>
	void reflect(Visitor&& v) const
	{
		this->SceneGeometryT::reflect(v);
		v(meshes, "mesh");
		v(materials, "mat");
		v(textures, "tex");
		v(instances, "inst");
	}

	char const* getTexture(unsigned i) const { return (i) ? &textures[i] : nullptr; }
};

typedef SceneT<> Scene;

struct DataHeader
{
	unsigned id;
	unsigned size;
	unsigned version;
	unsigned elementSize;

	static unsigned make_id(char const* id);
	static DataHeader make(char const* id, size_t size, unsigned version, size_t elementSize);
	template <class T>
	static unsigned make_version(T, std::integral_constant<unsigned, T::version>* = nullptr) { return T::version; }
	static unsigned make_version(...) { return 0; }
};

} // namespace
