#pragma once

#include "stdx"
#include <string>
#include <vector>

namespace stdx
{
	struct file_tag;
	typedef stdx::error<file_tag> file_error;

	long long file_time(char const* name);
	bool file_touch(char const* name);

	std::string dirname(char const* path);
	std::string basename(char const* path);
	std::string realpath(char const* path);

	std::string concat_path(char const* tail, char const* head);
	std::string relative_path(char const* from, char const* to);
	std::string filesys_relative_path(char const* from, char const* to);

	std::string load_file(char const* name);
	
	std::vector<char> load_binary_file(char const* name, bool nullterminated = false);
	
	struct file_flags
	{
		enum open_mode
		{
			nonexisting,
			new_overwrite,
			open_or_new,
			existing
		};
		enum access_flags
		{
			dont_share = 0x0,
			read = 0x1,
			write = 0x2,
			readwrite = read | write
		};
		enum access_hints
		{
			nohints = 0x0,
			sequential = 0x1,
			random = 0x2
		};
	};

	struct mapped_file : file_flags
	{
		char* data;
		size_t size;

		mapped_file(char const* name, size_t size, unsigned access = file_flags::read, file_flags::open_mode mode = file_flags::new_overwrite,
			unsigned share = file_flags::read, unsigned hints = file_flags::nohints);
		~mapped_file();

		void prefetchAll();

		mapped_file(mapped_file &&right)
			: data(right.data)
			, size(right.size)
		{
			right.data = nullptr;
		}
		mapped_file& operator =(mapped_file right)
		{
			std::swap(data, right.data);
			std::swap(size, right.size);
			return *this;
		}

		// MSVC compatibility
	private:
		mapped_file(mapped_file const&);
	};
	
	inline char const* read_binary(void const* stream)
	{	return static_cast<char const*>(stream); }
	inline char* write_binary(void* stream)
	{	return static_cast<char*>(stream); }
	template <class SerializationFunct>
	inline size_t size_binary(SerializationFunct&& f)
	{	size_t size = 0; f(size); return size; }

	template <class T>
	inline void serialize_binary(char*& stream, T const& val)
	{	memcpy(stream, &reinterpret_cast<char const&>(val), sizeof(val)); stream += sizeof(val); }
	template <class T>
	inline void serialize_binary(char const*& stream, T& val)
	{	memcpy(&reinterpret_cast<char&>(val), stream, sizeof(val)); stream += sizeof(val); }
	template <class T>
	inline void serialize_binary(size_t& stream, T& val)
	{	stream += sizeof(val); }

	template <class Range>
	inline void serialize_container_binary(char*& stream, Range const& range)
	{
		auto size = range.size();
		serialize_binary(stream, size);
		auto bytes = sizeof(*range.data()) * size;
		if (size > 0)
			memcpy(stream, reinterpret_cast<char const*>(range.data()), bytes);
		stream += bytes;
	}
	template <class Range>
	inline void serialize_container_binary(char const*& stream, Range& range)
	{
		size_t size = 0;
		serialize_binary(stream, size);
		range.resize(size);
		auto bytes = sizeof(*range.data()) * size;
		if (size > 0)
			memcpy(reinterpret_cast<char*>(range.data()), stream, bytes);
		stream += bytes;
	}
	template <class Range>
	inline void serialize_container_binary(size_t& stream, Range const& range)
	{
		auto size = range.size();
		serialize_binary(stream, size);
		auto bytes = sizeof(*range.data()) * size;
		stream += bytes;
	}

	void init_shell_on_startup();

	struct dialog
	{
		enum t
		{
			open,
			save,
			folder
		};
	};
	std::vector<std::string> prompt_file(char const* current = nullptr, char const* extensions = nullptr
		, dialog::t mode = dialog::open, bool multi = false);
	std::vector<std::string> prompt_file_compat(char const* current = nullptr, char const* extensions = nullptr
		, dialog::t mode = dialog::open, bool multi = false);

	struct choice
	{
		enum t
		{
			ok,
			yesno,
			yesnocancel
		};
	};
	int prompt(char const* message, char const* title = nullptr, choice::t choice = stdx::choice::ok);

	struct include_resolver
	{
		virtual std::string resolve(char const* filename, bool localInclude) const = 0; 
	};

	std::string process_includes_(stdx::data_range_param<char const> src, char const* filename
		, include_resolver const& resolve_include, stdx::data_range_param<char const> preamble = stdx::data_range_param<char const>()
		, bool int_file_id = false);

	template <class Resolve>
	inline std::string process_includes(stdx::data_range_param<char const> src, char const* filename
		, Resolve&& resolve_include, stdx::data_range_param<char const> preamble = stdx::data_range_param<char const>()
		, bool int_file_id = false)
	{
		struct resolver_wrapper : include_resolver
		{
			Resolve& resolver;
			resolver_wrapper(Resolve& resolver) : resolver(resolver) { }
			std::string resolve(char const* filename, bool localInclude) const override { return resolver(filename, localInclude); } 
		} resolver_wrapper(resolve_include);
		return process_includes_(src, filename, resolver_wrapper, preamble, int_file_id);
	}
	
	template <class Char = char, class ChildPtr = void>
	struct key_value_node
	{
		typedef typename std::conditional<std::is_void<ChildPtr>::value, key_value_node*, ChildPtr>::type child_pointer;

		stdx::range<Char const*> key, value;
		stdx::range<child_pointer> children;

		// key comparisons
		static bool key_order(key_value_node const& a, key_value_node const& b) { return memcmp(a.key, b.key) < 0; }
		static bool key_less(key_value_node const& a, stdx::range<Char const*> thanKey) { return memcmp(a.key, thanKey) < 0; }
		static bool key_equal(key_value_node const& a, stdx::range<Char const*> key) { return memcmp(a.key, key) == 0; }
		
		struct key_comparator
		{
			bool operator ()(key_value_node const& a, key_value_node const& b) { return memcmp(a.key, b.key) < 0; }
			bool operator ()(key_value_node const& a, stdx::range<Char const*> thanKey) { return memcmp(a.key, thanKey) < 0; }
			bool operator ()(stdx::range<Char const*> thanKey, key_value_node const& b) { return memcmp(b.key, thanKey) > 0; }
		};

		void sort()
		{
			std::sort(children.first, children.last, key_order);
			for (auto& child : children)
				child.sort();
		}

		key_value_node const* find_linear(stdx::data_range_param<Char const> key) const
		{
			auto it = std::find(children.first, children.last, key, key_equal);
			return (it != children.last) ? it : nullptr;
		}

		key_value_node const* find_sorted(stdx::data_range_param<Char const> key) const
		{
			auto it = std::lower_bound(children.first, children.last, key, key_less);
			return (it != children.last && key_equal(*it, key)) ? it : nullptr;
		}

		stdx::range<key_value_node const*> find_sorted_range(stdx::data_range_param<Char const> key) const
		{
			auto it = std::equal_range(children.first, children.last, key, key_comparator());
			return stdx::range<key_value_node const*>(it.first, it.second);
		}
	};

//	std::unique_ptr<key_value_node<char>[]> parse_ini_file();

} // namespace
