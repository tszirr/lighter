#pragma once

#ifdef WIN32
	#define NOMINMAX
	#define WIN32_LEAN_AND_MEAN
	#include <Windows.h>
#endif

#include <CL/opencl.h>

#include "stdx"

namespace ocl
{

struct ocl_tag;
typedef stdx::error<ocl_tag> ocl_error;

#define THROW_OPENCL_ERROR(error, ctx) do { auto _uniqueerrorval = error; if (_uniqueerrorval != CL_SUCCESS) throwx( ::ocl::ocl_error(ctx) ); } while (false)

template <class RefClass, class Pointer, cl_int (CL_API_CALL* Deleter)(Pointer)>
struct cl_destroy : stdx::ref_base<Pointer>
{
	typedef Pointer pointer;
	typedef stdx::own<RefClass> owned;
	void destroy() const
	{
		if (this->ref)
			(*Deleter)(this->ref);
	}
	void forget()
	{
		this->ref = 0;
	}
	bool valid() const
	{
		return (this->ref != 0);
	}
};

} // namespace
